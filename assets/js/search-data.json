{"0": {
    "doc": "Accessibility",
    "title": "Accessibility Chrome Extensions",
    "content": ". | Beeline Reader | Speech to Text | Text to Speech | Dyslexia- Friendly VS Code Theme | . ",
    "url": "https://momentum-team-16.github.io/course/references/a11y/#accessibility-chrome-extensions",
    "relUrl": "/references/a11y/#accessibility-chrome-extensions"
  },"1": {
    "doc": "Accessibility",
    "title": "Learn about Accessibility",
    "content": ". | Google web.dev Learn Accessibility | MDN Accessibility | MDN CSS and JS Accessibility Best Practices | . ",
    "url": "https://momentum-team-16.github.io/course/references/a11y/#learn-about-accessibility",
    "relUrl": "/references/a11y/#learn-about-accessibility"
  },"2": {
    "doc": "Accessibility",
    "title": "Improving the Accessibility of Your Website",
    "content": ". | Random Color Picker to Choose Colors with the Right Amount of Contrast | Quick Accessibility Tests (YT playlist) | Lighthouse Developer Tools | . ",
    "url": "https://momentum-team-16.github.io/course/references/a11y/#improving-the-accessibility-of-your-website",
    "relUrl": "/references/a11y/#improving-the-accessibility-of-your-website"
  },"3": {
    "doc": "Accessibility",
    "title": "Accessibility",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/a11y/",
    "relUrl": "/references/a11y/"
  },"4": {
    "doc": "Help & Info",
    "title": "Zoom",
    "content": "All meetings happen on Zoom. When your team isn‚Äôt meeting with your instructor, you‚Äôre welcome to use the room to work together. Link to Zoom Team Meeting . Link to Zoom Co-Working . ",
    "url": "https://momentum-team-16.github.io/course/about/#zoom",
    "relUrl": "/about/#zoom"
  },"5": {
    "doc": "Help & Info",
    "title": "GitHub",
    "content": ". | Team GitHub organization ‚Äì all your project repos are located here | Notes | . ",
    "url": "https://momentum-team-16.github.io/course/about/#github",
    "relUrl": "/about/#github"
  },"6": {
    "doc": "Help & Info",
    "title": "How to use this site",
    "content": ". | Posts: This section is for occasional posts by your instructors to supplement the planned topics for each day. See also the list of topics by date for information about the material you‚Äôll be working on. | Topics by Date: A listing by date of the topic you will be working on with your instructor. CODE DEMOis a link to the demo code from your instructor. PROJECTis a link to the project you‚Äôre working on. POSTis a link to any supplemental info from your instructor. There may not be one every day. | Phases &gt; Topics: Detailed context, project, and reference information about a curriculum topic. These are added daily. | References: A big list of links to documentation, code, articles, and other material you will need to learn and do the projects, organized by topic. | Weekly Schedule: A visual of meeting and project times throughout the week. | Help &amp; Info: This page. | Search Bar: (header) Search site content by keyword. | . ",
    "url": "https://momentum-team-16.github.io/course/about/#how-to-use-this-site",
    "relUrl": "/about/#how-to-use-this-site"
  },"7": {
    "doc": "Help & Info",
    "title": "General References",
    "content": ". | Foundations Course on Thinkific | Our Student Guidelines: Getting Help | Asking technical questions: Your Brain‚Äôs API | Julia Evans, How To Ask Good Questions | Rukia Sheikh-Mohamed, 5 Steps to Getting Unstuck | . ",
    "url": "https://momentum-team-16.github.io/course/about/#general-references",
    "relUrl": "/about/#general-references"
  },"8": {
    "doc": "Help & Info",
    "title": "Help & Info",
    "content": "Contents . | Zoom | GitHub | How to use this site | General References | . ",
    "url": "https://momentum-team-16.github.io/course/about/",
    "relUrl": "/about/"
  },"9": {
    "doc": "Django Advanced Models & Queries",
    "title": "Django Advanced Models & Queries",
    "content": "Contents . | Models and Relationships | Managers and QuerySets | Queries and Lookups | QuerySets and Managers | Constraints | Aggregate and Annotate | Using the Django Shell | SQL | . Models and Relationships . | List of all Django Reference content related to Models | Don‚Äôt forget! Django Best Practices: Custom User Model | Django Docs: Saving Model Instances | Less Obvious Things to Do with the Django ORM | üçï Tips for using Django‚Äôs Many-to-Many Field | Django Docs: Related Objects Reference | . Managers and QuerySets . | Django Docs: Model Managers | Django Docs: Related Objects Reference | Django Docs: QuerySets | . Queries and Lookups . You can think of queries like questions you ask about your data, phrased in a way that the database can answer. Django has a built-in library (the Django ORM) that lets us do all the CRUD actions we need for our application, and more. | Django Model Queries CheatSheet | Django Docs: Retrieving Objects | Django Docs: Field lookups | Django Docs: Lookups that span relationships | Django Docs: Lookups with Related objects | Pretty Printed Video: How Model Queries Work in Django | Pretty Printed Video: Querying One-to-Many Relationships in Django | . QuerySets and Managers . | Django Docs: QuerySets | Django Docs: Model Managers | Django Docs: Complex lookups with Q | Django Docs: Database expressions with F objects | . Constraints . | Django Docs: model constraints -&gt; this gives you the general format/syntax | Django Docs: UniqueConstraint | . Aggregate and Annotate . | PrettyPrinted Video: Basics of Django Aggregations | Pretty Printed Video: How to Use Annotate in Django | Django docs: Aggregate &amp; Annotate | Django docs: Combining Aggregations with other QuerySets | Django Docs: Aggregation Functions (e.g., Avg, Count, Min, Max) | . Using the Django Shell . This is about Django‚Äôs interactive REPL, not pipenv shell, and also not zsh. | Django Docs: Using the Django Shell | How to use django-extensions shell_plus | . SQL . Links in this section are really more information than you need right now, but it‚Äôs relevant and interesting. Things included here are good to know but ok to save for later. | What is SQL? | SQL Basics: Learn X in Y minutes -&gt; this is a helpful reference for SQL syntax when you run into it. You do not need to write SQL for Django because the Django ORM does it for you, and it does it well. The Django docs often illustrate queries made by the ORM using SQL syntax, however, and you will find it helpful in your job to know the basics. | . ",
    "url": "https://momentum-team-16.github.io/course/references/advanced-django-models-and-queries/",
    "relUrl": "/references/advanced-django-models-and-queries/"
  },"10": {
    "doc": "Agile Development",
    "title": "Team Charter",
    "content": ". | Create a Team Agreement | A good overview of what a team charter is and how to create one | Here are three team charter template examples, all from Miro. | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#team-charter",
    "relUrl": "/references/agile-development/#team-charter"
  },"11": {
    "doc": "Agile Development",
    "title": "Time Management ‚åõ",
    "content": ". | üí´ Common Time Management Problems &amp; Solutions | The Pomodoro Technique for Time Management &amp; Productivity . | Zapier‚Äôs list of Pomodoro Apps | . | Time Blocking | . Productivity Timers ‚è≤Ô∏è . | Cuckoo The one we use in our meetings | Pomofocus Pomodoro Timer | Marinara Pomodoro Timer Chrome Extension | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#time-management-",
    "relUrl": "/references/agile-development/#time-management-"
  },"12": {
    "doc": "Agile Development",
    "title": "Idea Generation",
    "content": "Inspiration on the Technical Side üëæ . | awesome repos - Repos labeled ‚Äúawesome-something‚Äù are community-sourced collections of links to resources, projects, and generally relevant stuff on a specific topic. I‚Äôm listing a few that might be of interest, but there are lots of others to browse. | awesome-react | awesome-javascript | awesome-django | awesome-python | public apis | data is plural | JavaScript game engines . | awesome-jsgames - examples of games made with JS | . | GitHub Collections - the link above for JS game engines is one GitHub collection, but there are many others you can browse through for ideas. | project ideas and resources | . Exploring Ideas with Mind Mapping üí° . | Short video series on mind mapping techniques | MindMeister: online Mind Mapping Tool | MindNode: mind mapping app available in the App store | Miro: collaborative tool for mindmapping, planning, wireframing | Whimsical: a little more streamlined than Miro; collaborative tool for mindmapping, planning, wireframing | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#idea-generation",
    "relUrl": "/references/agile-development/#idea-generation"
  },"13": {
    "doc": "Agile Development",
    "title": "Intro to Agile Development",
    "content": ". | Jamie Howard, Huddle on Agile, Aug 2022 | Beginner‚Äôs Guide to Scrum and Agile | 12 principles from the Agile Manifesto | The Power in Agile, a talk by Sarah Mei A critical look at the power dynamics implicit in Agile methods. | Agile 101: Glossary | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#intro-to-agile-development",
    "relUrl": "/references/agile-development/#intro-to-agile-development"
  },"14": {
    "doc": "Agile Development",
    "title": "Agile Practices üõπ",
    "content": ". | Forming, Storming, Norming and Performing for Agile teams | Making sense of MVP Video that explores the skateboard diagram in detail | Acceptance Criteria | What is a definition of done and why do you need it? Written by Jamie Howard, a Durham, NC tech leader who has hired our grads. | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#agile-practices-",
    "relUrl": "/references/agile-development/#agile-practices-"
  },"15": {
    "doc": "Agile Development",
    "title": "User Personas",
    "content": ". | Getting the Most Out of Personas | Creating Personas | Four persona examples for UI/UX design | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#user-personas",
    "relUrl": "/references/agile-development/#user-personas"
  },"16": {
    "doc": "Agile Development",
    "title": "User Stories",
    "content": ". | Atlassian: Writing User Stories | FreeCodeCamp Video: How and Why to Write User Stories | Goat User Stories on Twitter | How to Write the Best User Stories with Story Cards | Story Mapping | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#user-stories",
    "relUrl": "/references/agile-development/#user-stories"
  },"17": {
    "doc": "Agile Development",
    "title": "User Flows",
    "content": ". | User Flows | . | Designing User Flows | . | A shorthand for designing UI flows | Creating Perfect User Flows for Smooth UX | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#user-flows",
    "relUrl": "/references/agile-development/#user-flows"
  },"18": {
    "doc": "Agile Development",
    "title": "Going from User Stories to Tasks",
    "content": ". | Breaking down user stories into tasks | Composing Meaningful Tasks | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#going-from-user-stories-to-tasks",
    "relUrl": "/references/agile-development/#going-from-user-stories-to-tasks"
  },"19": {
    "doc": "Agile Development",
    "title": "The Business of Making Software",
    "content": ". | How we use ‚Äúship small‚Äù to rapidly build new features at GitHub | Command Line Heroes Podcast Produced by RedHat and hosted by Saron Yitbarek, this is a scripted podcast that tells the story of software from the last 40-ish years or so. Season 1 has an episode of the origin of Agile Development. The whole series is really well done. If you enjoy understanding the history of things like I do, you will like this podcast! | What is Code? by Paul Ford Read this for the stakeholder perspective ‚Äì really long but extremely well written and produced! | Stack Overflow Podcast: Building a web app | CodeNewbie Podcast: What does it mean to be a part of the software development life cycle | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#the-business-of-making-software",
    "relUrl": "/references/agile-development/#the-business-of-making-software"
  },"20": {
    "doc": "Agile Development",
    "title": "üìΩÔ∏è Slides",
    "content": ". | Phase Overview slides | Agile slides | Idea slides | Product Roadmap Slides | Personas &amp; User Stories Slides | Trello &amp; Tasks Slides | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/#%EF%B8%8F-slides",
    "relUrl": "/references/agile-development/#Ô∏è-slides"
  },"21": {
    "doc": "Agile Development",
    "title": "Agile Development",
    "content": "Contents . | Team Charter | Time Management ‚åõ . | Productivity Timers ‚è≤Ô∏è | . | Idea Generation . | Inspiration on the Technical Side üëæ | Exploring Ideas with Mind Mapping üí° | . | Intro to Agile Development | Agile Practices üõπ | User Personas | User Stories | User Flows | Going from User Stories to Tasks | The Business of Making Software | üìΩÔ∏è Slides | . ",
    "url": "https://momentum-team-16.github.io/course/references/agile-development/",
    "relUrl": "/references/agile-development/"
  },"22": {
    "doc": "AJAX & APIs",
    "title": "üéØ Objectives",
    "content": ". | More about using state in React | Conditional rendering | How to make AJAX calls in React using Axios | The useEffect hook | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/ajax-and-apis/#-objectives",
    "relUrl": "/phase3-fe/ajax-and-apis/#-objectives"
  },"23": {
    "doc": "AJAX & APIs",
    "title": "üèóÔ∏è Project: React Trivia",
    "content": "This extended project is due on Monday, January 30. You‚Äôll request data from the Open Trivia API to power a trivia quiz application built with React. React Trivia GitHub Project Link . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/ajax-and-apis/#%EF%B8%8F-project-react-trivia",
    "relUrl": "/phase3-fe/ajax-and-apis/#Ô∏è-project-react-trivia"
  },"24": {
    "doc": "AJAX & APIs",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": "How to Think About Building Things in React . | üì∫ Understanding what it means to be declarative instead of imperative - video | üìñ Thinking in React | üìñ Thinking in React 2020 | üìñ Thinking ‚Äúdeclaratively‚Äù in React | . Props and State . | üìñ Props vs. State - blog post ‚ö†Ô∏è This post references the older class syntax of React. The basic concepts are the same, though. | üì∫ Using State vs Props in React - video | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/ajax-and-apis/#-read---watch---listen",
    "relUrl": "/phase3-fe/ajax-and-apis/#-read---watch---listen"
  },"25": {
    "doc": "AJAX & APIs",
    "title": "üîñ References",
    "content": ". | AJAX in React | The useEffect hook | Events in React | Conditional Rendering Techniques | React Concepts | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/ajax-and-apis/#-references",
    "relUrl": "/phase3-fe/ajax-and-apis/#-references"
  },"26": {
    "doc": "AJAX & APIs",
    "title": "AJAX & APIs",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/ajax-and-apis/",
    "relUrl": "/phase3-fe/ajax-and-apis/"
  },"27": {
    "doc": "Authentication in a React App",
    "title": "üéØ Objectives",
    "content": ". | Understanding what ‚Äúlogged in‚Äù means in code | Implementing token authentication in a React application | Using local storage with state to store an auth token | Building a log-in form | Making POST requests with Axios | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/auth-in-react/#-objectives",
    "relUrl": "/phase3-fe/auth-in-react/#-objectives"
  },"28": {
    "doc": "Authentication in a React App",
    "title": "üèóÔ∏è Collaborative Project",
    "content": "Work with your team to get some initial components rendering. You can render components individually just to get them showing up on the page, without completing the conditions to show them or the interaction between them yet! . Goals by the next meeting . | Your app can make GET requests for questions and answers OR cards and friends. | Show questions or cards on the page. | Have at least a solid start on POST requests for creating questions or cards. | Deploy to Netlify as soon as possible. | PRO TIP ‚≠ê Your code needs to run locally with no errors before you can deploy it. | . | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/auth-in-react/#%EF%B8%8F-collaborative-project",
    "relUrl": "/phase3-fe/auth-in-react/#Ô∏è-collaborative-project"
  },"29": {
    "doc": "Authentication in a React App",
    "title": "üîñ References",
    "content": ". | Using State with local storage | AJAX in React | Working with Forms in React | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/auth-in-react/#-references",
    "relUrl": "/phase3-fe/auth-in-react/#-references"
  },"30": {
    "doc": "Authentication in a React App",
    "title": "Authentication in a React App",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/auth-in-react/",
    "relUrl": "/phase3-fe/auth-in-react/"
  },"31": {
    "doc": "CSS Basics",
    "title": "Getting Started with CSS",
    "content": ". | MDN CSS Basics | CSS-Tricks Getting Started with HTML &amp; CSS | Rachel Andrew: How to Learn CSS | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-basics/#getting-started-with-css",
    "relUrl": "/references/css-basics/#getting-started-with-css"
  },"32": {
    "doc": "CSS Basics",
    "title": "Selectors and Properties",
    "content": ". | CSS Diner -&gt; This goes into a LOT of depth. | MDN CSS Selectors | MDN CSS Reference for Property Names | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-basics/#selectors-and-properties",
    "relUrl": "/references/css-basics/#selectors-and-properties"
  },"33": {
    "doc": "CSS Basics",
    "title": "Specificity",
    "content": ". | CSS SpeciFISHity with Plankton, Fish and Sharks, Estelle Weyl | MDN Specificity | Hacks for dealing with specificity | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-basics/#specificity",
    "relUrl": "/references/css-basics/#specificity"
  },"34": {
    "doc": "CSS Basics",
    "title": "The Box Model",
    "content": ". | The Box Model in CSS | How Box Sizing Works | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-basics/#the-box-model",
    "relUrl": "/references/css-basics/#the-box-model"
  },"35": {
    "doc": "CSS Basics",
    "title": "General CSS",
    "content": ". | A Look Back at the History of CSS | 58 bytes of css to look great nearly everywhere | Coolors Color Palette Generator | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-basics/#general-css",
    "relUrl": "/references/css-basics/#general-css"
  },"36": {
    "doc": "CSS Basics",
    "title": "CSS Basics",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/css-basics/",
    "relUrl": "/references/css-basics/"
  },"37": {
    "doc": "UI/UX and Design",
    "title": "UI/UX and Design",
    "content": ". | 10 Cheat Codes for designing user interfaces | 7 Rules for Creating Gorgeous UIs | 7 Rules Part Two | Practical Color Theory for People Who Code | Typography for Developers | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-design/",
    "relUrl": "/references/css-design/"
  },"38": {
    "doc": "CSS Extra Stuff",
    "title": "CSS Libraries",
    "content": "We care about the look and feel of the UI, but that doesn‚Äôt always mean we have to write custom CSS. Sometimes (like now when you focusing on learning other things!) it makes sense to rely on a library for most or all of your styling. There are a range of libraries from the very comprehensive to the very minimal. Here are some lighter-weight ones that you could check out: . | SmolCSS - minimal snippets You can just copy and paste these styles as needed. üòé | Bulma | Tachyons | Materialize | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-extra/#css-libraries",
    "relUrl": "/references/css-extra/#css-libraries"
  },"39": {
    "doc": "CSS Extra Stuff",
    "title": "CSS Extra Stuff",
    "content": ". | A Look Back at the History of CSS | 58 bytes of css to look great nearly everywhere | Coolors Color Palette Generator | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-extra/",
    "relUrl": "/references/css-extra/"
  },"40": {
    "doc": "CSS Layout",
    "title": "General",
    "content": ". | CSS-Tricks Guide to Centering Things | CSS-Tricks Tinted Images with Multiple Backgrounds | MDN: Use CSS to solve common problems | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-layout/#general",
    "relUrl": "/references/css-layout/#general"
  },"41": {
    "doc": "CSS Layout",
    "title": "Flexbox",
    "content": ". | CSS-Tricks A Complete Guide to Flexbox | Flexbox Froggy | How Flexbox Works with gifs | More Flexbox with gifs | CSS-Tricks Flexbox Layout Thought Process | CSS-Tricks flex property | demo flexbox nav menu with adjustable property values | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-layout/#flexbox",
    "relUrl": "/references/css-layout/#flexbox"
  },"42": {
    "doc": "CSS Layout",
    "title": "Responsive CSS",
    "content": ". | MDN Using Media Queries | How to use media queries alongside Grid and Flexbox | . Design . | 10 Cheat Codes for designing user interfaces | 7 Rules for Creating Gorgeous UIs | 7 Rules Part Two | Practical Color Theory for People Who Code | Typography for Developers | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-layout/#responsive-css",
    "relUrl": "/references/css-layout/#responsive-css"
  },"43": {
    "doc": "CSS Layout",
    "title": "Extra",
    "content": "Layout techniques for CSS include a lot of options other than flexbox. This reference summarizes them and gives you a good sense of other things you might see. | MDN: CSS Layout Reference | . A popular alternative to flexbox for layout is called ‚Äúgrid‚Äù, also built into CSS. With flexbox you choose to line up your boxes either vertically or horizontally, but with grid you can specify both horizontal and vertical arrangement in the same box. | CSS-Tricks Complete Guide to Grid | Grid Garden (from the makers of Flexbox Froggy) | . Jen Simmons is a former Mozilla developer and educator with a great series on YouTube to teach you css layout best practices using grid and flexbox. | Jen Simmons: Layout Land | . Before we had flexbox or grid built into CSS, we relied on floats for layout. You should not be using floats to lay out your pages, but you may still see them in other people‚Äôs code. Because of that, you may want to familiarize yourself at some point. | Floats 101 Demo | Simple float example | CSS-Tricks All About Floats | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-layout/#extra",
    "relUrl": "/references/css-layout/#extra"
  },"44": {
    "doc": "CSS Layout",
    "title": "CSS Layout",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/css-layout/",
    "relUrl": "/references/css-layout/"
  },"45": {
    "doc": "Responsive CSS",
    "title": "Responsive CSS",
    "content": ". | MDN Using Media Queries | How to use media queries alongside Grid and Flexbox | . ",
    "url": "https://momentum-team-16.github.io/course/references/css-responsive/",
    "relUrl": "/references/css-responsive/"
  },"46": {
    "doc": "Deploying a React App",
    "title": "üéØ Objectives",
    "content": ". | Check in on project progress | Finding &amp; fixing bugs in your project | Deploying to Netlify | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/data-and-deployment/#-objectives",
    "relUrl": "/phase3-fe/data-and-deployment/#-objectives"
  },"47": {
    "doc": "Deploying a React App",
    "title": "üèóÔ∏è Project",
    "content": "The React Trivia application is due on Monday, January 30. It should meet at least the minimum functional requirements and must be deployed to Netlify. üöÄ . Minimum functional requirements . | A user can see a list of categories. | A user can select one category. | A user can see questions for that category, with answer options for each question. | A user can select an answer for a question. | A user can see if that answer is the correct answer. | A user can go back to the category list and start over. | . It would be awesome if‚Ä¶ . | The answers are shuffled so that the correct answer is not always in the same position. | The questions are shown one at a time instead of all at once, and the user is able to advance through the set of questions. | A user can see how many questions they answered correctly (or some kind of score) when they have answered all the questions in a category. | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/data-and-deployment/#%EF%B8%8F-project",
    "relUrl": "/phase3-fe/data-and-deployment/#Ô∏è-project"
  },"48": {
    "doc": "Deploying a React App",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": ". | üéß Syntax.fm podcast: State in React | üìñ Component Design in React | üì∫ Jenn Creighton, React Is Fiction | About the Ship It Mindset | ship it squirrel | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/data-and-deployment/#-read---watch---listen",
    "relUrl": "/phase3-fe/data-and-deployment/#-read---watch---listen"
  },"49": {
    "doc": "Deploying a React App",
    "title": "üîñ References",
    "content": ". | Instructions for deploying a React App to Netlify | Deployment | Managing State | AJAX in React | The useEffect hook | Events in React | Conditional Rendering Techniques | React Concepts | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/data-and-deployment/#-references",
    "relUrl": "/phase3-fe/data-and-deployment/#-references"
  },"50": {
    "doc": "Deploying a React App",
    "title": "Deploying a React App",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/data-and-deployment/",
    "relUrl": "/phase3-fe/data-and-deployment/"
  },"51": {
    "doc": "Databases and Deployment",
    "title": "üéØ Objectives",
    "content": ". | Using PostgreSQL with Django | Deploying Django applications to Render | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/databases-and-deployment/#-objectives",
    "relUrl": "/phase3-be/databases-and-deployment/#-objectives"
  },"52": {
    "doc": "Databases and Deployment",
    "title": "üèóÔ∏è Project: Habit Tracker",
    "content": "You‚Äôll be working on Habit Tracker this week. This project is due on Monday, January 23. How to get started . | Read the project requirements thoroughly and plan out how you would do this project | Generate the Django app and project | Make sure that you are using Postgres, not SQLite | Design your models. Make sure to create a diagram showing model fields and relationships. Talk through with each other how you are thinking about this. | You can deploy as soon as you have a Django app that can show the initial rocketship page. Deploying early is a best practice. | . By tomorrow: . | Your models should be functional. | ‚ÄúFunctional‚Äù means you can see and work with them at least in the admin (and ideally in the Django shell) and they do what they are supposed to do and have relationships that work. | . | You should be able to create habits and associated daily records in the Django shell (I recommend using shell_plus which is available when you have django-extensions installed). | You may have attempted to deploy to Render. | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/databases-and-deployment/#%EF%B8%8F-project-habit-tracker",
    "relUrl": "/phase3-be/databases-and-deployment/#Ô∏è-project-habit-tracker"
  },"53": {
    "doc": "Databases and Deployment",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": "These are this week‚Äôs required readings, videos, and/or podcasts. Read, watch, or listen, and take notes. These are also listed under references. Deployment . | üì∫ Katie McLaughlin, What is Deployment, Anyway? | üìñ Full Stack Python: Deployment - read through the section on Deployment Hosting Options, then read Platform-as-a-service | üéß Deploying and Running Django Web Apps in 2021 | . Databases &amp; Data Modeling . | üìñ Full Stack Python: Databases | üìñ Full Stack Python: ORMs | üìñ What is a relational database? | üì∫ Entity Relationship Diagrams (ERD), from Lucid Chart | üìñ Writing Safe Database Migrations in Django | üì∫ Database Design for Beginners This is a talk from RailsConf, which is focused on Ruby on Rails (Rails is a framework for building web applications in Ruby, very similiar to Django). The talk is an excellent introduction to how to think about your data model ‚Äì that is, the logic that drives the decisions you make about the models in your code and the structure of your database. Even though it uses Ruby examples you should be able to get the gist. | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/databases-and-deployment/#-read---watch---listen",
    "relUrl": "/phase3-be/databases-and-deployment/#-read---watch---listen"
  },"54": {
    "doc": "Databases and Deployment",
    "title": "üîñ References",
    "content": ". | Deployment | Databases | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/databases-and-deployment/#-references",
    "relUrl": "/phase3-be/databases-and-deployment/#-references"
  },"55": {
    "doc": "Databases and Deployment",
    "title": "Databases and Deployment",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/databases-and-deployment/",
    "relUrl": "/phase3-be/databases-and-deployment/"
  },"56": {
    "doc": "Databases",
    "title": "Databases",
    "content": "Contents . | Database GUIs | Advanced Databases | Data Modeling | Database Normalization | . Database GUIs . | DB Browser for SQLite | Postico for Postgres | DBeaver - Universal Database Tool - This is much more complex than you may need but it is interesting. | . Advanced Databases . | üìñ Full Stack Python: Databases | üìñ Full Stack Python: ORMs | What is a relational database? | üìñ Writing Safe Database Migrations in Django | Using Postgres Locally | Digging Deeper Into Migrations | . Data Modeling . | Class-Responsibility-Collaborator Model (CRC) | Entity Relationship Diagrams (ERD), from Lucid Chart | What is an Entity Relationship Diagram? - The first video is especially good. | Database Design Tutorial This is a great short article that is really an intro to databases. It covers some data best practices and explains primary keys, foreign keys, and relationships. | . Database Normalization . This is very much optional at this early stage of your learning but important to learn about at some point if you‚Äôre going to be working with data in your job. | An Introduction to Database Normalization | Video on the first normal form | Video on the second normal form | Video on the third normal form | . ",
    "url": "https://momentum-team-16.github.io/course/references/databases/",
    "relUrl": "/references/databases/"
  },"57": {
    "doc": "Defining MVP",
    "title": "üéØ Learning Objectives &amp; Agenda",
    "content": ". | Pitching and refining your product idea | Thinking about features and beginning to think about implementation | Creating a product roadmap | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/defining-mvp/#-learning-objectives--agenda",
    "relUrl": "/phase4/defining-mvp/#-learning-objectives--agenda"
  },"58": {
    "doc": "Defining MVP",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": "Listen to industry professionals talk about the complex business of creating software. | üéß Stack Overflow Podcast: Building a web app | üéß CodeNewbie Podcast: What does it mean to be a part of the software development life cycle | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/defining-mvp/#-read---watch---listen",
    "relUrl": "/phase4/defining-mvp/#-read---watch---listen"
  },"59": {
    "doc": "Defining MVP",
    "title": "üõπ Defining MVP and Prioritizing Features",
    "content": "Use these slides to guide your team discussions today. | Product Roadmap Slides | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/defining-mvp/#-defining-mvp-and-prioritizing-features",
    "relUrl": "/phase4/defining-mvp/#-defining-mvp-and-prioritizing-features"
  },"60": {
    "doc": "Defining MVP",
    "title": "üîñ References",
    "content": ". | Agile Basics | MVP and Team Formation | Idea Generation Included here are links to technical resources that may be helpful to you as you talk about implementation. | Product Roadmap Slides | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/defining-mvp/#-references",
    "relUrl": "/phase4/defining-mvp/#-references"
  },"61": {
    "doc": "Defining MVP",
    "title": "Defining MVP",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase4/defining-mvp/",
    "relUrl": "/phase4/defining-mvp/"
  },"62": {
    "doc": "Django Deployment",
    "title": "Django Deployment",
    "content": "Deployment . | üì∫ Katie McLaughlin, What is Deployment, Anyway? | üìñ Full Stack Python: Deployment | üéß Deploying and Running Django Web Apps in 2021 | The Essential Django Deployment Guide Big picture of all your options and considerations, very thorough. | . Deployment-Related How-Tos . | üöÄ Deploying a Django App to Render | Render Official Docs on Deploying Django - these instructions use a different package manager called poetry instead of pipenv | Render Postgres | Using Postgres Locally | Django Docs: Deployment Checklist | django-environ | . The Ship-It Mindset . | About the Ship It Mindset | ship it squirrel | . ",
    "url": "https://momentum-team-16.github.io/course/references/deployment/",
    "relUrl": "/references/deployment/"
  },"63": {
    "doc": "Detailed Schedule",
    "title": "Phase 4 Final Project &amp; Presentation Schedule",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase4/detailed-schedule/#phase-4-final-project--presentation-schedule",
    "relUrl": "/phase4/detailed-schedule/#phase-4-final-project--presentation-schedule"
  },"64": {
    "doc": "Detailed Schedule",
    "title": "Feb 20 - March 10",
    "content": "Standup and Check-Ins will be in the regular Zoom . All times in EST. Daily Standups . | Start Monday February 20 | Morning with staff, 10-15 minutes . | @9:30 Team Pepa | @9:45 Team Austin 3-16 | . | Friday standups are asynchronous. Everyone posts their 3-bullet-point update in their team‚Äôs Slack channel. | Please post your async standup update by 11:00 am on Fridays. | . | We suggest a late day standup on your own schedule. | . Team Check-Ins twice weekly, Monday &amp; Thursday . | Check your calendar; you should have an invite | The first check-in will be on Monday Feb 20. | Check-ins are scheduled for 60 minutes as follows on Mondays and Thursdays until March 6. | @10:30-11:30 Team Pepa | @11:30-12:30 Team Austin 3-16 | . | All-Team Low-Key Demo Friday March 3 @2:00 pm . | All teams meet together to show each other what you have been working on and get feedback and support from peers. | . | The last scheduled check-in is on Tuesday March 7 at your team‚Äôs regular check-in time. | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/detailed-schedule/#feb-20---march-10",
    "relUrl": "/phase4/detailed-schedule/#feb-20---march-10"
  },"65": {
    "doc": "Detailed Schedule",
    "title": "Final Week March 6-10",
    "content": "Monday March 6 . | Feature Freeze @EOD . | No additional features can added to your application after today. | Only bug fixes, tying up loose ends, styling, and clean-up today and tomorrow. | . | . Tuesday March 7 . | Last standup @your regular time | Last check-in @your regular time | Code Freeze @EOD . | Time to stop writing code and focus completely on your presentation. | Seriously, no more coding this week. | . | . Wednesday March 8 . | 9:30-10:00 am All teams meet in the classroom for Presentation Prep Kickoff meeting | Working on presentations all day today. (Presentation Prep Guide) | 2:00-3:00 pm First rehearsal with staff (First draft, no video expected) | . Thursday March 9 . | Morning: Public-speaking coaching for each team with Jessica (A working draft of your script will be useful for this meeting.) . | 11:30 am-12 pm Team Pepa | 1:15-1:45 pm Team Austin 3-16 | . | 1:45-2:15 pm Second rehearsal with staff . | All teams together | Please have your screencast done. | . | 3:30 pm Final screencast video &amp; blurb due to Jessica (Google Drive link) | Tech Check &amp; Final Rehearsal @4:00-4:45 pm (Your Zoom link will be provided via email) . | All teams together with staff | . | . Friday March 10 . | 12:00-1:00 pm Presentations (A Zoom link inviting you to be a panelist for a webinar will be in your email inbox; you must use the link in your own email because that link will be unique to you) | 1:00-2:00 pm Celebrate Program Complete! Zoom Link TBD | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/detailed-schedule/#final-week-march-6-10",
    "relUrl": "/phase4/detailed-schedule/#final-week-march-6-10"
  },"66": {
    "doc": "Detailed Schedule",
    "title": "Detailed Schedule",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase4/detailed-schedule/",
    "relUrl": "/phase4/detailed-schedule/"
  },"67": {
    "doc": "DRF Views and Serializers",
    "title": "üéØ Objectives",
    "content": ". | Views, Generic Views, and Viewsets | Nesting and customizing serializers | Permissions | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf-serializers-and-views/#-objectives",
    "relUrl": "/phase3-be/drf-serializers-and-views/#-objectives"
  },"68": {
    "doc": "DRF Views and Serializers",
    "title": "üèóÔ∏è Project",
    "content": "Keep on with your API building üòé üí™! What do you need to know to get it working? . By now you should have a list of endpoints that your API provides, even if they are not all complete yet. A good place to document this list of endpoints would be in your README, formatted with Markdown. This list should show the URLs along with the HTTP methods/verbs, and ideally should include an example of the JSON that has to be included in the request body (for any requests that send data in the body) and an example of the JSON response that will be returned, for each endpoint. This list will be helpful for your own testing and it can serve as necessary documentation for your API. Here is an example of what your documentation might look like for an endpoint to create a book: . Create a new book . Request . Requires authentication. title and author are required fields. POST api/books . { \"title\": \"The Anatomy of Melancholy\", \"author\": \"Robert Burton\", \"publication_year\": 1621 } . Response . 201 Created { \"pk\": 6, \"title\": \"The Anatomy of Melancholy\", \"author\": \"Robert Burton\", \"publication_year\": 1621, \"featured\": false, \"reviews\": [] } . By today or tomorrow, your app should respond with JSON data to GET requests for all habits (or books), for a single habit (or book), and for one habit‚Äôs (or book‚Äôs) associated objects (like records or reviews). By tomorrow you should also have at least some of your POSTs working and can begin working on UPDATE and DELETE. üíÅ Make sure you thoroughly test your endpoints in Insomnia to confirm that they are returning what they should, and NOT returning what they shouldn‚Äôt. Use show_urls from django-extensions to help you check what urls you have defined. üëÄ Is your app deployed yet? üöÄ . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf-serializers-and-views/#%EF%B8%8F-project",
    "relUrl": "/phase3-be/drf-serializers-and-views/#Ô∏è-project"
  },"69": {
    "doc": "DRF Views and Serializers",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": "Ship It . | About the Ship It Mindset | ship it squirrel | . Deepen your understanding of OOP . | How Classes and Objects Work in Python | RealPython: super() | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf-serializers-and-views/#-read---watch---listen",
    "relUrl": "/phase3-be/drf-serializers-and-views/#-read---watch---listen"
  },"70": {
    "doc": "DRF Views and Serializers",
    "title": "üîñ References",
    "content": ". | DRF | Serializers | Views | Permissions | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf-serializers-and-views/#-references",
    "relUrl": "/phase3-be/drf-serializers-and-views/#-references"
  },"71": {
    "doc": "DRF Views and Serializers",
    "title": "DRF Views and Serializers",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf-serializers-and-views/",
    "relUrl": "/phase3-be/drf-serializers-and-views/"
  },"72": {
    "doc": "Intro to Django REST Framework",
    "title": "üéØ Objectives",
    "content": "Today we dive into Django REST Framework. ü§ø . | Installing in a Django project | Serializers | Class-based Views | Using DRF Documentation | Generic API Views | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf/#-objectives",
    "relUrl": "/phase3-be/drf/#-objectives"
  },"73": {
    "doc": "Intro to Django REST Framework",
    "title": "üèóÔ∏è Project: Choose Your Own Adventure üê™ üê´",
    "content": "Choose one of the following options. The application must be deployed, whichever option you choose. üöÄ . This project is due on Monday, January 30. üê™ OPTION ONE: Add an API to Habit Tracker . Continue working in your existing Habit Tracker repo. Add a new app to your project and call it api (python manage.py startapp api). Your app should provide CRUD endpoints that return JSON responses. By Friday afternoon, you should be able to do almost all of the following via the API ‚Äì that is, by making requests using Insomnia. | get a list of habits | create a new habit | get data about a specific habit that includes its associated daily records, if any | create a record for a specific habit for today (stretch: create a record for any date) | . By Monday, you should be able to complete all necessary CRUD tasks through the API: . | list habits | create a new habit | update a habit | delete a habit | get data about a specific habit that includes its associated daily records, if any | create a record for a habit for today (stretch: create a record for any date) | update a record for a habit | delete a record from a habit | . Write up a list of endpoints you think you will need before you start doing this. Don‚Äôt make endpoints you don‚Äôt need. You should develop and test your endpoints using Insomnia. You can also use the browsable API that DRF gives you in the browser, but you should be comfortable using Insomnia. üê´ OPTION TWO: Library API . Create a new API-only application that lets users keep track of books they are reading, want to read, or have read, and take private or public notes on books. More details about project requirements are included in the project README. Library API Project. You should not make forms or templates for this app, but you will need models, urls, views, and serializers. You should use class-based views and return JSON responses. ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf/#%EF%B8%8F-project-choose-your-own-adventure--",
    "relUrl": "/phase3-be/drf/#Ô∏è-project-choose-your-own-adventure--"
  },"74": {
    "doc": "Intro to Django REST Framework",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": ". | üìñ REST Resource Naming Guide This resource will be very helpful in thinking about how to structure your urls. | üéß DjangoChat Podcast: DRF | üìñ Django docs: Introduction to class-based views This refers to class-based views in Django but it explains the concept, which you will see applied in DRF. | üìñ Class-based vs. function-based views This is about Django views in general, not specific to DRF. | üì∫ DjangoCon 2019: Generic View? What Is That and Why Would I Use It?, Felipe Lee Again about class-based views in Django but the explanation is relevant to what you will see in DRF. | üí´ üì∫ What You Should Know About DRF, Lacey Williams Henschel, PyCascades 2021 | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf/#-read---watch---listen",
    "relUrl": "/phase3-be/drf/#-read---watch---listen"
  },"75": {
    "doc": "Intro to Django REST Framework",
    "title": "üîñ References",
    "content": ". | DRF | HTTP &amp; REST | Introduction to RESTful APIs | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf/#-references",
    "relUrl": "/phase3-be/drf/#-references"
  },"76": {
    "doc": "Intro to Django REST Framework",
    "title": "Intro to Django REST Framework",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/drf/",
    "relUrl": "/phase3-be/drf/"
  },"77": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Intro to REST APIs",
    "content": ". | Notes: REST APIs 101 | RESTful APIs Read up through the ‚ÄúStandard Methods‚Äù subsection of the section on ‚ÄúMethods‚Äù. You can read more if you want to but it gets pretty deep. | Safia Abdullah, You and Me Learn All About HTTP | Web APIs Explained By Selling Goods From Your Farm | What is a REST API? | A Beginner‚Äôs Guide to REST | REST APIs: How They Work and What You Need to Know | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#intro-to-rest-apis",
    "relUrl": "/references/drf/#intro-to-rest-apis"
  },"78": {
    "doc": "Django REST Framework and Building APIs",
    "title": "REST API Design",
    "content": ". | REST Resource Naming Guide This resource may be helpful in thinking about how to structure your urls. | A Long (Mostly Helpful) List of Things to Keep In Mind When You‚Äôre Building an API Many of these best practices you get for free with DRF; some are included with packages we use; and some of this is advice for the choices you have to make in the code you write. | Overview of creating an API Nothing much new in this article, but it is a good summary and high-level overview of how to go about creating an API with DRF. | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#rest-api-design",
    "relUrl": "/references/drf/#rest-api-design"
  },"79": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Django REST Framework Basics",
    "content": ". | Django REST Framework Documentation | Installation | Django Chat: Django REST Framework | Django REST Framework: An Introduction - RealPython | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#django-rest-framework-basics",
    "relUrl": "/references/drf/#django-rest-framework-basics"
  },"80": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Serializers",
    "content": ". | DRF Docs: Serializers | DRF Docs: ModelSerializer | DRF Docs: Serializer SlugRelatedField | Using Different Read and Write Serializers in DRF | How to Save Extra Data to a DRF Serializer For example, when you need to associate a user with an object that you are creating | Effectively using DRF Serializers | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#serializers",
    "relUrl": "/references/drf/#serializers"
  },"81": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Views",
    "content": "Class-based Views . | Django docs: Introduction to class-based views This refers to class-based views in Django but it explains the concept, which you see applied in DRF. | Class-based vs. function-based views This is about Django views in general, not specific to DRF. | DRF Docs: Class-based views This talks about APIView. | . Generic Views . | DjangoCon 2019: Generic View? What Is That and Why Would I Use It?, Felipe Lee Again about class-based views in Django but the explanation is relevant to what you will see in DRF. | Article on DRF Generic Views | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#views",
    "relUrl": "/references/drf/#views"
  },"82": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Viewsets",
    "content": ". | What You Should Know About DRF, Lacey Williams Henschel, PyCascades 2021 | What You Should Know About DRF, Part 1: ModelViewSet attributes and methods | What You Should Know About DRF, Part 2: Customizing built-in methods | What You Should Know About DRF, Part 3: Adding custom endpoints | . @action decorator in ViewSets . | DRF Docs: Marking extra actions for routing with the @action decorator | DRF Docs: Routing for extra actions | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#viewsets",
    "relUrl": "/references/drf/#viewsets"
  },"83": {
    "doc": "Django REST Framework and Building APIs",
    "title": "DRF in Depth",
    "content": ". | üíú Classy Django REST Framework This is exceptionally useful for working with classes in DRF. | ‚≠ê How to Save Extra Data to a DRF Serializer This is essential for adding in extra info that is not included in your serializer, like the user (from request.user) that is associated with the object you want to create. | DRF Recipes | DRF docs: Pagination | Django Docs: Changing a password | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#drf-in-depth",
    "relUrl": "/references/drf/#drf-in-depth"
  },"84": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Permissions",
    "content": ". | DRF Docs: Permissions | DRF Permissions | Built-in Permission Classes in DRF | Custom Permissions in DRF | Pro Tip about DRF Permissions This shows how to combine permissions with logical operators like and and or | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#permissions",
    "relUrl": "/references/drf/#permissions"
  },"85": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Setting CORS Headers",
    "content": "See also HTTP: CORS . | Django CORS Guide | django-cors-headers | Enabling CORS in Django | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#setting-cors-headers",
    "relUrl": "/references/drf/#setting-cors-headers"
  },"86": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Authentication",
    "content": ". | Djoser documentation . | Base Endpoint Guide for Djoser Includes endpoint to create a new user and other useful stuff | Token Authentication Endpoint Guide for Djoser Details on the token auth endpoints | . | DRF docs: Token-based authentication | The Ultimate Tutorial for Django REST Framework: Login and Authentication This uses the Djoser library. | üì∫ Finally Understand Auth in DRF - a Will Vincent talk Will isn‚Äôt using the Djoser library but he does a great job of reviewing different auth strategies and why you would choose one or the other. Watch this for a better understanding and overview of authentication. | üìñ Simple Is Better Than Complex: How to Implement Token Authentication in DRF This does NOT use Djoser, but it‚Äôs a great walkthrough of some of what Djoser does for you if you would like more detail. | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#authentication",
    "relUrl": "/references/drf/#authentication"
  },"87": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Pagination",
    "content": ". | DRF docs: Pagination | Classy DRF: PageNumberPagination | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#pagination",
    "relUrl": "/references/drf/#pagination"
  },"88": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Search",
    "content": ". | Search from the Ground Up DjangoCon 2019 video explaining search in detail | Django Docs: Search overview | Basic and Full-Text Search with Django and Postgres | Blog post with more on full-text search | If you want A LOT more detail about full-text search in Postgres and Django, this blog piece has you covered | Pretty Printed: How to Perform Full Text Searches in Django with Postgres | Full Text Search with Django and PostgreSQL: More Facets, Less Dependencies Team 11 Momentum grad Jason Judkins is a co-presenter of this talk given at DjangoCon in October 2022! ü§© | . Filtering . | DRF - Filtering Pretty useful reference. Includes how to filter your output based on GET parameters, which you will want to do for using search terms. | Django Docs: full-text search &amp; the search lookup | Django Docs: SearchVector You‚Äôll need this if you want to search against more than a single field. | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#search",
    "relUrl": "/references/drf/#search"
  },"89": {
    "doc": "Django REST Framework and Building APIs",
    "title": "File Upload",
    "content": ". | Django File (and Image) Uploads Tutorial Another solid post from Will Vincent; he does not include all the necessary info to make file uploads work in production but otherwise it‚Äôs a good overview about how to configure Django to accept uploads. | File Upload with DRF | Success with Static Files | Django Docs: ImageField | Django Docs: FileField | Pillow: Python Imaging Library . | django-imagekit If you want to resize images when they are uploaded, or do any kind of image processing, you will need this. Don‚Äôt add it unless you know you need it. | . | django-storages | DRF Docs: FileUploadParser Without this you will get errors about unsupported media types | . AWS S3 . | What is Amazon S3? This is Amazon‚Äôs documentation and it gets really in-depth. | Introduction to S3 Also from Amazon | . | How to Set Up Amazon S3 . | AWS S3 Free Tier Info | . | Storing Django Static and Media files on AWS S3 | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/#file-upload",
    "relUrl": "/references/drf/#file-upload"
  },"90": {
    "doc": "Django REST Framework and Building APIs",
    "title": "Django REST Framework and Building APIs",
    "content": "Contents . | Intro to REST APIs | REST API Design | Django REST Framework Basics | Serializers | Views . | Class-based Views | Generic Views | . | Viewsets . | @action decorator in ViewSets | . | DRF in Depth | Permissions | Setting CORS Headers | Authentication | Pagination | Search . | Filtering | . | File Upload . | AWS S3 | . | . ",
    "url": "https://momentum-team-16.github.io/course/references/drf/",
    "relUrl": "/references/drf/"
  },"91": {
    "doc": "API Endpoints",
    "title": "üéØ Objectives",
    "content": ". | How are the projects coming along? üëÄ | Documenting and testing your API‚Äôs endpoints with Insomnia | Pagination | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/endpoints/#-objectives",
    "relUrl": "/phase3-be/endpoints/#-objectives"
  },"92": {
    "doc": "API Endpoints",
    "title": "üèóÔ∏è Project",
    "content": "Keep on going. üí™ üöÄ . Today we need to get you past any blockers you may be experiencing and plan next steps for your application. By now you should have provided your front end with documented and functional endpoints to be able to use application data. You should have Djoser installed so that your log in and log out endpoints are working. Make sure you are sharing the Djoser information with your front end. You should include these endpoints in your API documentation or project README. ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/endpoints/#%EF%B8%8F-project",
    "relUrl": "/phase3-be/endpoints/#Ô∏è-project"
  },"93": {
    "doc": "API Endpoints",
    "title": "Creating a properly hashed password",
    "content": "In order to save a properly hashed password for a user in the Django Admin, make sure you are using UserAdmin in admin.py. If you don‚Äôt do this, the default form will save an unhashed password, you will run into authentication errors. from django.contrib import admin from django.contrib.auth.admin import UserAdmin ... admin.site.register(User, UserAdmin) . You can also change a password from the command line. $ python manage.py changepassword jimih Password: Password (again): Password changed successfully for user 'jimih' . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/endpoints/#creating-a-properly-hashed-password",
    "relUrl": "/phase3-be/endpoints/#creating-a-properly-hashed-password"
  },"94": {
    "doc": "API Endpoints",
    "title": "üîñ References",
    "content": ". | Authentication with Djoser | DRF in Depth | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/endpoints/#-references",
    "relUrl": "/phase3-be/endpoints/#-references"
  },"95": {
    "doc": "API Endpoints",
    "title": "API Endpoints",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/endpoints/",
    "relUrl": "/phase3-be/endpoints/"
  },"96": {
    "doc": "File & Image Upload",
    "title": "üéØ Objectives",
    "content": ". | How to upload files with Django &amp; DRF | How to configure storage for production uploads | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/file-and-image-upload/#-objectives",
    "relUrl": "/phase3-be/file-and-image-upload/#-objectives"
  },"97": {
    "doc": "File & Image Upload",
    "title": "üèóÔ∏è Wrapping up this Project",
    "content": "Your documentation should be done and delivered to the front end by now. For an example of what your documentation should look like, see the README for the DRF Library example. Make sure to check your permissions and validations. Your model fields should not allow the creation of records with null fields that are crucial for the functioning of your app, for instance. üëâ If your project does not yet meet minimum requirements, you should aim for meeting them by the end of the day tomorrow. ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/file-and-image-upload/#%EF%B8%8F-wrapping-up-this-project",
    "relUrl": "/phase3-be/file-and-image-upload/#Ô∏è-wrapping-up-this-project"
  },"98": {
    "doc": "File & Image Upload",
    "title": "üìé Handling requests that include attached files",
    "content": "Using Insomnia . | Select the right HTTP method for your endpoint. | Choose binary file attachment from the body menu (where you normally put the body of a request) | Set headers on the Headers tab (this example assumes an image file in jpeg format, named profile-photo.jpg): . Content-Type: image/jpeg Content-Disposition: attachment; filename=profile-photo.jpg . | . For more information on these headers see References. CORS for file upload . Assuming you are using django-cors-headers, you‚Äôll need to add the following to settings.py to allow the request headers necessary for file attachments: . # in settings.py from corsheaders.defaults import default_headers CORS_ALLOW_HEADERS = list(default_headers) + [ 'content-disposition', ] . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/file-and-image-upload/#-handling-requests-that-include-attached-files",
    "relUrl": "/phase3-be/file-and-image-upload/#-handling-requests-that-include-attached-files"
  },"99": {
    "doc": "File & Image Upload",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": "File Upload . | Django File (and Image) Uploads Tutorial -&gt; A good and very recent post from Will Vincent; he does not include all the necessary info to make file uploads work in production but otherwise it‚Äôs a good overview. | üìñ File Upload with DRF | üéß + üìñ Success with Static Files | üìñ What is Amazon S3? -&gt; Skim this ‚Äì this is Amazon‚Äôs documentation and it gets really in-depth. | üì∫ Introduction to S3 -&gt; Also from Amazon | . | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/file-and-image-upload/#-read---watch---listen",
    "relUrl": "/phase3-be/file-and-image-upload/#-read---watch---listen"
  },"100": {
    "doc": "File & Image Upload",
    "title": "üîñ References",
    "content": ". | DRF File Upload | CORS | HTTP Headers | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/file-and-image-upload/#-references",
    "relUrl": "/phase3-be/file-and-image-upload/#-references"
  },"101": {
    "doc": "File & Image Upload",
    "title": "File & Image Upload",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/file-and-image-upload/",
    "relUrl": "/phase3-be/file-and-image-upload/"
  },"102": {
    "doc": "Uploading Files",
    "title": "üéØ Objectives",
    "content": ". | Project progress check-in | Get past any blockers you have | File inputs and implementing file upload | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/file-upload/#-objectives",
    "relUrl": "/phase3-fe/file-upload/#-objectives"
  },"103": {
    "doc": "Uploading Files",
    "title": "üèóÔ∏è Wrapping Up This Project",
    "content": "What remains to be done on your project? Some things to consider: . | Is it working in production? | Is it styled? | Have you considered how to handle states like errors (e.g., a 400 or 403 response), loading, or empty? | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/file-upload/#%EF%B8%8F-wrapping-up-this-project",
    "relUrl": "/phase3-fe/file-upload/#Ô∏è-wrapping-up-this-project"
  },"104": {
    "doc": "Uploading Files",
    "title": "üìÇ Handling Uploaded Files",
    "content": "The back-end is learning how to accept requests that included attached files (including image files). They will need to provide you with an endpoint that can accept attached files so that you can make a request to upload the file. But even before that endpoint is working, you can implement the form to allow users to upload a file. The HTTP method for the request could be a POST, PUT, or PATCH, depending on how the backend implements the endpoint. The example below is an update to an existing record; notice that we are using the PATCH method. This request includes only the file itself and no JSON; notice that the file is in the second position as an argument to axios.patch() as the body of the request. We must set the Content-Disposition header, which required by the server to handle the binary file attachment, in addition to the Authorization and Content-Type headers. axios.patch(url, file, { headers: { Authorization: 'Token ' + token, 'Content-Type': file.type, 'Content-Disposition': `attachment; filename=${file.name}` } }).then(res =&gt; console.log(res.data)) . NOTE: If you Google how to include a file attachment in an AJAX request, you‚Äôll see a lot of references to using the FormData object. If you want to do it this way, please discuss with your back end devs, as they will need to make sure that they can parse MultiPart form content. The above method does not use the FormData object. It‚Äôs a little simpler in that it sends just the file and no additional data. You‚Äôll need a way to access the file that is being uploaded by the user. That file is what is stored in the file variable in the above example. See the references below for more information about using a file input element and accessing a selected file. The useRef() hook will be helpful to get the files from the input element after a user has selected a file using the form. ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/file-upload/#-handling-uploaded-files",
    "relUrl": "/phase3-fe/file-upload/#-handling-uploaded-files"
  },"105": {
    "doc": "Uploading Files",
    "title": "üîñ Resources",
    "content": ". | HTTP headers | The useRef hook | Uploading Files | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/file-upload/#-resources",
    "relUrl": "/phase3-fe/file-upload/#-resources"
  },"106": {
    "doc": "Uploading Files",
    "title": "Uploading Files",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/file-upload/",
    "relUrl": "/phase3-fe/file-upload/"
  },"107": {
    "doc": "Final Presentation Prep Guide",
    "title": "A Guide to Final Presentations",
    "content": "This is your public debut as a professional technologist, and we want the focus squarely on you and all your skills. The project itself is a vehicle to highlight why an employer would want to hire you. Each developer on the team will introduce themselves (a minute or less), then the team will present your project (4-6 minutes). Following the presentation, each team will have a few minutes of Q&amp;A time with panelists. Each person on your team should be prepared to answer questions. Decide ahead of time who will take what type of questions (see the section below on prepping for Q&amp;A). ",
    "url": "https://momentum-team-16.github.io/course/presentation-prep-guide#a-guide-to-final-presentations",
    "relUrl": "/presentation-prep-guide#a-guide-to-final-presentations"
  },"108": {
    "doc": "Final Presentation Prep Guide",
    "title": "Previous Team Final Presentations",
    "content": "Watch for examples of how the show runs and how previous teams handled their presentations and Q&amp;A. | Team Fourteen Presentation Day, October 2022 Passcode: 8Gtd#jS! | Team Thirteen Presentation Day, September 2022 Passcode: @lT=iR=3 | Team Eleven Presentation Day, May 2022 Passcode: 0Hd0m#&amp;J | Team Ten Presentation Day, February 2022 Passcode: tz&amp;M7t&amp;s | Team Nine Presentation Day, October 2021 (no password required) | Team Eight Presentation Day, August 2021 Passcode: +E#$E@h0 | Team Seven Presentation Day, May 2021 Passcode: *2AO%WaU | . ",
    "url": "https://momentum-team-16.github.io/course/presentation-prep-guide#previous-team-final-presentations",
    "relUrl": "/presentation-prep-guide#previous-team-final-presentations"
  },"109": {
    "doc": "Final Presentation Prep Guide",
    "title": "Tell the story of your app and your team",
    "content": "Show your confidence, enthusiasm, ability to learn a lot in a short time, and readiness to contribute as part of a professional development team. Structure of Presentation . | Introduce yourself. Tell us who you are and what you did before this/something about your background. | Describe your app and what it does, concisely, in one or two sentences. Example: ‚Äú8-Track is an app that lets you build a to-do list for listening to your music.‚Äù | Why did you build this? What is the central problem you are solving or the need that your app addresses? | Each developer talks about some feature of the app that they worked on with enough technical detail to show what you‚Äôve learned. | Conclusion: it‚Äôs up to you how to end your presentation; see the topics list below for suggestions. | . Screencast &amp; App Description . Record a screencast that demos your app‚Äôs features. You and your team will talk while the screencast is playing. You can record a screencast easily in QuickTime (which should already be on your Mac). The video format should be .mov. Write a short (1-2 sentences) description of your app. This will be used along with a video of your presentation on your website when we post it, and may be used when Momentum staff communicate verbally or in writing with employers or others outside our organization about what your team built. Upload your final video and brief description (AND APP NAME!) to the Google Drive folder below by Thursday March 9 at 3:30 pm. ‚¨ÜÔ∏è üìÅ Link to upload your video . Topics to include in your presentation . You don‚Äôt have to mention all of the following, but consider touching on several of these points. Think about what you want to show off. Remember, the focus should be on your skills and what you did. | What part or parts of your app did you work on? | Talk about relevant personal motivations to work on this project, or relevant prior experience. | What specifically did you do and how did you do it? . | How is your app structured? | What specific technologies did you use? | . | What did you learn doing this project? . | Did you teach yourself something new? Explain what you learned and why you learned it. | Did you do something a different way than you have before? Why? | . | Was there a particular challenge you had to solve or tricky bug you had to fix? . | Describe what it was and what was tricky or interesting about it. | What did you do to you solve it? | . | What technical decisions did you have to make? . | What were your considerations and tradeoffs, and why did you make the decisions you did? | . | Are there any features your app has that were technically challenging to implement? | Suggested conclusion topics: . | What you plan next for the app | What you‚Äôre excited about doing professionally in your developer job | Notable lessons learned | Thanks for audience‚Äôs time | . | . ",
    "url": "https://momentum-team-16.github.io/course/presentation-prep-guide#tell-the-story-of-your-app-and-your-team",
    "relUrl": "/presentation-prep-guide#tell-the-story-of-your-app-and-your-team"
  },"110": {
    "doc": "Final Presentation Prep Guide",
    "title": "Q&amp;A Prep",
    "content": "You should be prepared to answer questions about the technical implementation of your application, about its use and the user needs it addresses, and about ways you might develop it in the future. Examples questions being given to the panelists include: . | Can you tell me about why you decided to use to build this feature? | What was one challenge or unexpected thing you encountered during your project, and how did you deal with it? | What is your favorite thing about this application? | Did you have to make any hard choices or compromises during development? How did you make that decision? | What was something new you learned to do or got really good at doing during this project? | If you were to keep working on this, what is the next feature you would add? | What did your team do really well together? | . How to Handle Q&amp;A Live . Each person on your team will have an opportunity to speak during Q&amp;A, so each person should prepare to make use of that opportunity. You can agree on your team who will take each of the above questions, or categories of questions, if they are asked. Another way to do this is to take turns with whatever is asked. Plan who will take the first audience question, then the second, then the third. If it‚Äôs your turn and the question is obviously one that is better answered by someone else on the team (because they worked on that feature, for example), you can give a short or partial answer, and then gracefully hand it over to your teammate. If you are a member of a group that is well represented in the tech industry, you can help to amplify voices that are not usually heard. Please consider handing over speaking time to a teammate if they have not had as much time to speak about technical topics. How to handle a question you don‚Äôt know the answer to . This is the same advice we have for technical interviews. Pivot to a topic you are prepared to talk about! . Try to make the transition as relevant as you can. You can say ‚ÄúI don‚Äôt know‚Äù if you feel comfortable doing that, but DON‚ÄôT STOP THERE! Take the opportunity to talk about something you do know. Do not feel compelled to confess that you don‚Äôt know something and DO NOT APOLOGIZE. All you have to do is express interest in the question, which shows you are a curious and undaunted continual learner, and keep the conversation going! . Example: ‚ÄúOh, that‚Äôs an interesting question. The way we thought about [that broad issue] in our app is‚Ä¶[insert something you are prepared to talk about].‚Äù . ",
    "url": "https://momentum-team-16.github.io/course/presentation-prep-guide#qa-prep",
    "relUrl": "/presentation-prep-guide#qa-prep"
  },"111": {
    "doc": "Final Presentation Prep Guide",
    "title": "Final Presentation Prep Guide",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/presentation-prep-guide",
    "relUrl": "/presentation-prep-guide"
  },"112": {
    "doc": "Forms and Client-Side Validation",
    "title": "HTML Forms",
    "content": ". | MDN Forms Guide | MDN HTML form element | MDN HTMLFormElement | MDN HTML input element | MDN HTML label element | MDN Using FormData Objects | . ",
    "url": "https://momentum-team-16.github.io/course/references/forms/#html-forms",
    "relUrl": "/references/forms/#html-forms"
  },"113": {
    "doc": "Forms and Client-Side Validation",
    "title": "Submitting",
    "content": ". | MDN submit event | MDN Event.preventDefault | . ",
    "url": "https://momentum-team-16.github.io/course/references/forms/#submitting",
    "relUrl": "/references/forms/#submitting"
  },"114": {
    "doc": "Forms and Client-Side Validation",
    "title": "Validation",
    "content": ". | MDN Client-Side Form Validation | MDN HTML5 Constraint Validation | . ",
    "url": "https://momentum-team-16.github.io/course/references/forms/#validation",
    "relUrl": "/references/forms/#validation"
  },"115": {
    "doc": "Forms and Client-Side Validation",
    "title": "Extra",
    "content": ". | Form Fields in Eloquent JavaScript, Chapter 18 | . ",
    "url": "https://momentum-team-16.github.io/course/references/forms/#extra",
    "relUrl": "/references/forms/#extra"
  },"116": {
    "doc": "Forms and Client-Side Validation",
    "title": "Forms and Client-Side Validation",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/forms/",
    "relUrl": "/references/forms/"
  },"117": {
    "doc": "Search with DRF and Postgres",
    "title": "üéØ Objectives",
    "content": ". | Assessing what is left to be done on the collaborative project | Implementing search in your API | Postgres full-text search | Paginating data in responses | Using a management command to create seed data | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/full-text-search/#-objectives",
    "relUrl": "/phase3-be/full-text-search/#-objectives"
  },"118": {
    "doc": "Search with DRF and Postgres",
    "title": "üèóÔ∏è Project",
    "content": "What can you do to make your project not just minimally functional, but great? . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/full-text-search/#%EF%B8%8F-project",
    "relUrl": "/phase3-be/full-text-search/#Ô∏è-project"
  },"119": {
    "doc": "Search with DRF and Postgres",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": ". | üìñ Basic and Full-Text Search with Django and Postgres | üì∫ Search from the Ground Up Will Vincent talk at DjangoCon 2019 explaining search in detail | üì∫ Pretty Printed: How to Perform Full Text Searches in Django with Postgres | üéß Django Chat Podcast: Search | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/full-text-search/#-read---watch---listen",
    "relUrl": "/phase3-be/full-text-search/#-read---watch---listen"
  },"120": {
    "doc": "Search with DRF and Postgres",
    "title": "üîñ References",
    "content": ". | Filtering | Full-text Search | Queries | Pagination | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/full-text-search/#-references",
    "relUrl": "/phase3-be/full-text-search/#-references"
  },"121": {
    "doc": "Search with DRF and Postgres",
    "title": "Search with DRF and Postgres",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/full-text-search/",
    "relUrl": "/phase3-be/full-text-search/"
  },"122": {
    "doc": "Git and Command Line",
    "title": "Command Line",
    "content": ". | Really friendly command-line intro | . ",
    "url": "https://momentum-team-16.github.io/course/references/git-and-cli/#command-line",
    "relUrl": "/references/git-and-cli/#command-line"
  },"123": {
    "doc": "Git and Command Line",
    "title": "Git",
    "content": ". | Really friendly Git intro | Git Cheat Sheet PDF | Git handbook from GitHub | Git Command Explorer ‚Äì this tool lets you look up commands by what you are trying to do | Quick video showing how to clone your project repo | . ",
    "url": "https://momentum-team-16.github.io/course/references/git-and-cli/#git",
    "relUrl": "/references/git-and-cli/#git"
  },"124": {
    "doc": "Git and Command Line",
    "title": "Advanced Git",
    "content": ". | How to use Git as a Team | GitHub Docs: Pull Requests | Git Interactive Cheatsheet | Git Official Reference | Dangit, Git!?! - recovering from mistakes | . ",
    "url": "https://momentum-team-16.github.io/course/references/git-and-cli/#advanced-git",
    "relUrl": "/references/git-and-cli/#advanced-git"
  },"125": {
    "doc": "Git and Command Line",
    "title": "Git and Command Line",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/git-and-cli/",
    "relUrl": "/references/git-and-cli/"
  },"126": {
    "doc": "Goals Reflection Exercise",
    "title": "You‚Äôre halfway through! üéâ",
    "content": "This is a good opportunity to pause and remember why you set out to learn to code in the first place. Examine what you have been doing so far that‚Äôs been working well, and ask yourself if you have some habits or practices that have not served you very well. A renewed focus on your goals will help you get through the challenges of the next 8 weeks! . ",
    "url": "https://momentum-team-16.github.io/course/halfway-goals#youre-halfway-through-",
    "relUrl": "/halfway-goals#youre-halfway-through-"
  },"127": {
    "doc": "Goals Reflection Exercise",
    "title": "Reflection &amp; goal setting",
    "content": "For each of these questions, spend no more than 2-3 minutes free writing* an answer. This is for yourself only, not to turn in. * Free writing means to write without stopping, whatever you think of, without worrying about grammar or spelling. Just get it out of your brain and onto paper (or onto the screen). It‚Äôs not meant to be read by anyone. The process of doing it is what‚Äôs important. Free Write: Career Goals . When you think about getting a job as a developer, what kind of work do you see yourself doing and enjoying? Describe the kind of day you‚Äôd like to have. Is there a particular focus that interests you at this point? A particular type of company? . Free Write: Technical Skills . | What are your biggest technical successes so far? What have you built that you are proud of? | What have been your biggest technical challenges or obstacles? What has been the hardest thing for you to learn so far? | What are your top 3 technical goals for yourself at this point? What do you want to accomplish in the second half of the program? | . Free Write: Start/Stop/Continue . Reflect on things that you have been doing so far in your work at Momentum. Have your choices and actions been serving your goals? . | What do you want to START doing that you have not been doing? | What do you want to STOP doing this phase (something that has not been working for you)? | What do you want to CONTINUE doing that has been serving you well? | . ",
    "url": "https://momentum-team-16.github.io/course/halfway-goals#reflection--goal-setting",
    "relUrl": "/halfway-goals#reflection--goal-setting"
  },"128": {
    "doc": "Goals Reflection Exercise",
    "title": "Sharing",
    "content": "If you have any tips for things that have been helping you, please share in our team Slack! Likewise, if you could use some advice on how to deal with something that‚Äôs been hard for you, let folks know. Your colleagues are often your best resource. ",
    "url": "https://momentum-team-16.github.io/course/halfway-goals#sharing",
    "relUrl": "/halfway-goals#sharing"
  },"129": {
    "doc": "Goals Reflection Exercise",
    "title": "Goals Reflection Exercise",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/halfway-goals",
    "relUrl": "/halfway-goals"
  },"130": {
    "doc": "HTML",
    "title": "HTML",
    "content": ". | MDN Getting Started with HTML | MDN HTML Resources Page | MDN HTML Element Reference | . ",
    "url": "https://momentum-team-16.github.io/course/references/html/",
    "relUrl": "/references/html/"
  },"131": {
    "doc": "HTTP and RESTful APIs",
    "title": "üéØ Objectives",
    "content": ". | HTTP requests and responses | REST APIs | Django REST Framework (DRF) | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/http-and-rest/#-objectives",
    "relUrl": "/phase3-be/http-and-rest/#-objectives"
  },"132": {
    "doc": "HTTP and RESTful APIs",
    "title": "üèóÔ∏è Project: DRF Tutorial",
    "content": "Complete the official Django REST Framework tutorial. You may find it easier going if you follow the guide by Will Vincent. Will Vincent uses the exact same code and follows the same sequence, but his approach is much more beginner-friendly. He also uses pipenv for the virtual environment like we do. Will‚Äôs tutorial stops short of the last step, step 6, in the official tutorial. If you finish step 5 and want to keep going, you can continue with the official tutorial, but this is not required. You should complete the tutorial by tomorrow. This project link generates an empty repo that you can use to push your completed tutorial to. ‚õî Do not copy &amp; paste the code. You‚Äôll get a lot more out of the tutorial if you type it out yourself. üìñ Read | üì∫ Watch | üéß Listen . These references are also listed on the DRF references page. | üìñ Web Applications 101 | üéß Django Chat: Django REST Framework | üìñ How HTTP works and why it‚Äôs important - Free Code Camp | üìñ A Beginner‚Äôs Guide to REST | üìñ REST APIs: How They Work and What You Need to Know | üìñ Django REST Framework: An Introduction - RealPython | üì∫ What is a REST API? | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/http-and-rest/#%EF%B8%8F-project-drf-tutorial",
    "relUrl": "/phase3-be/http-and-rest/#Ô∏è-project-drf-tutorial"
  },"133": {
    "doc": "HTTP and RESTful APIs",
    "title": "üîñ References",
    "content": ". | Introduction to RESTful APIs | Django REST Framework Basics | HTTP &amp; REST | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/http-and-rest/#-references",
    "relUrl": "/phase3-be/http-and-rest/#-references"
  },"134": {
    "doc": "HTTP and RESTful APIs",
    "title": "HTTP and RESTful APIs",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/http-and-rest/",
    "relUrl": "/phase3-be/http-and-rest/"
  },"135": {
    "doc": "HTTP",
    "title": "HTTP",
    "content": ". | Web Applications 101 | An overview of HTTP - MDN | HTTP Messages - MDN | How HTTP works and why it‚Äôs important - Free Code Camp | Response Codes With Cats | . ",
    "url": "https://momentum-team-16.github.io/course/references/http/",
    "relUrl": "/references/http/"
  },"136": {
    "doc": "HTTP",
    "title": "CORS",
    "content": ". | MDN CORS . | MDN Access-Control-Allow-Origin Header | . | Julia Evans comic explaining CORS better than MDN does | More Julia Evans on the Same Origin Policy | A Visual Guide to CORS by Lydia Hallie | Django CORS Guide | django-cors-headers | . ",
    "url": "https://momentum-team-16.github.io/course/references/http/#cors",
    "relUrl": "/references/http/#cors"
  },"137": {
    "doc": "HTTP",
    "title": "Headers",
    "content": ". | MDN Content-Type Header | MDN MIME types | MDN Content-Disposition Header | MDN Access-Control-Allow-Origin | . ",
    "url": "https://momentum-team-16.github.io/course/references/http/#headers",
    "relUrl": "/references/http/#headers"
  },"138": {
    "doc": "Agile Development 101",
    "title": "üéØ Learning Objectives &amp; Agenda",
    "content": ". | What is agile development? | Forming final project groups | Brainstorming product ideas | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/intro-agile/#-learning-objectives--agenda",
    "relUrl": "/phase4/intro-agile/#-learning-objectives--agenda"
  },"139": {
    "doc": "Agile Development 101",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": ". | Jamie Howard Huddle on Agile, Aug 2022 | How we use ‚Äúship small‚Äù to rapidly build new features at GitHub | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/intro-agile/#-read---watch---listen",
    "relUrl": "/phase4/intro-agile/#-read---watch---listen"
  },"140": {
    "doc": "Agile Development 101",
    "title": "üìΩÔ∏è Slides",
    "content": ". | Phase Overview slides | Agile slides | Idea slides | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/intro-agile/#%EF%B8%8F-slides",
    "relUrl": "/phase4/intro-agile/#Ô∏è-slides"
  },"141": {
    "doc": "Agile Development 101",
    "title": "üîñ References",
    "content": ". | Agile Development | Creating a team charter | Managing your time | Idea Generation &amp; Inspiration | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/intro-agile/#-references",
    "relUrl": "/phase4/intro-agile/#-references"
  },"142": {
    "doc": "Agile Development 101",
    "title": "Agile Development 101",
    "content": "Your goal in this phase is to design and build a real-world software product, working collaboratively on a small team using agile development practices and all the tools you‚Äôve learned so far, and some you will learn as you go. The people skills you‚Äôll use will be just as important as the technical skills ‚Äì perhaps more so. The experience of working on a team during this phase and the product you build will form the foundation for your job search. You will not begin writing code for your project until all the planning is done. ",
    "url": "https://momentum-team-16.github.io/course/phase4/intro-agile/",
    "relUrl": "/phase4/intro-agile/"
  },"143": {
    "doc": "Hello React World",
    "title": "üéØ Objectives",
    "content": ". | Exercism review | Intro to React . | How does React work? | What does React code look like? | . | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/intro-react/#-objectives",
    "relUrl": "/phase3-fe/intro-react/#-objectives"
  },"144": {
    "doc": "Hello React World",
    "title": "‚úÖ To Do",
    "content": ". | Continue working on Exercism. I‚Äôll take requests for one to work through together when we meet. | Need some JS review? Create a list of topics that you would like us to dig into some more. I‚Äôll take requests for demos if you want to review anything from Phase 1 or in the notes on JS for React. | Required reading/watching/listening for today or anything from yesterday that you didn‚Äôt get to. | Work on the React tutorial project(s) below. | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/intro-react/#-to-do",
    "relUrl": "/phase3-fe/intro-react/#-to-do"
  },"145": {
    "doc": "Hello React World",
    "title": "üõ†Ô∏è Setup",
    "content": "Make sure you have the following set up in your local environment. | Node &amp; npm | ESLint for VS Code | React developer tools for Chrome | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/intro-react/#%EF%B8%8F-setup",
    "relUrl": "/phase3-fe/intro-react/#Ô∏è-setup"
  },"146": {
    "doc": "Hello React World",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": ". | ‚≠ê üìñ React Quick Start (beta docs) These docs are still being written, so they are incomplete, but what is written is much more helpful than the older offical docs. | üìñ React docs | üì∫ Kent C. Dodds, The Introduction to React You‚Äôve Been Missing | üéß Syntax.fm podcast: The React Episode | üìñ A Complete Beginner‚Äôs Guide to npm ) | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/intro-react/#-read---watch---listen",
    "relUrl": "/phase3-fe/intro-react/#-read---watch---listen"
  },"147": {
    "doc": "Hello React World",
    "title": "üèóÔ∏è Project: React Tutorial",
    "content": "Ali Spittel‚Äôs Beginner‚Äôs Guide to React Tutorial. This is a really friendly tutorial for total beginners that will show you the most modern way to build React apps. This link will create an empty repo on GitHub that you can use to push your tutorial code to. If you finish this and want to keep going, try one of these other tutorials: . | The Beginner‚Äôs Guide to React - video-driven, intense and very complete | The official (beta) React tutorial - classic, official. | Dave Ceddia‚Äôs React tutorial - very long, very comprehensive, but still pretty accessible | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/intro-react/#%EF%B8%8F-project-react-tutorial",
    "relUrl": "/phase3-fe/intro-react/#Ô∏è-project-react-tutorial"
  },"148": {
    "doc": "Hello React World",
    "title": "üîñ References",
    "content": ". | Linting and formatting your code | npm | JS Syntax for React | React Tutorial Links | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/intro-react/#-references",
    "relUrl": "/phase3-fe/intro-react/#-references"
  },"149": {
    "doc": "Hello React World",
    "title": "Hello React World",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/intro-react/",
    "relUrl": "/phase3-fe/intro-react/"
  },"150": {
    "doc": "AJAX & APIs",
    "title": "APIs",
    "content": ". | Illustrated Dev: Meet the Robowaiter APIs Serving Us Data | Insomnia client | GitHub API Docs | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-ajax-and-apis/#apis",
    "relUrl": "/references/js-ajax-and-apis/#apis"
  },"151": {
    "doc": "AJAX & APIs",
    "title": "AJAX and Fetch",
    "content": ". | MDN AJAX | MDN Fetch API | MDN fetch() method | CSS-Tricks article on using Fetch | MDN Working with JSON | Code Academy Lesson on Fetch | AJAX explained by analogy | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-ajax-and-apis/#ajax-and-fetch",
    "relUrl": "/references/js-ajax-and-apis/#ajax-and-fetch"
  },"152": {
    "doc": "AJAX & APIs",
    "title": "Promises",
    "content": "Fetch requests use JavaScript promises to handle responses. Promises are a much bigger topic than we will get into right now, but if you want to know more about what a promise is and how to use it beyond the context of AJAX requests, you can start with the MDN documentation about it. | MDN JS Promise | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-ajax-and-apis/#promises",
    "relUrl": "/references/js-ajax-and-apis/#promises"
  },"153": {
    "doc": "AJAX & APIs",
    "title": "AJAX & APIs",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/js-ajax-and-apis/",
    "relUrl": "/references/js-ajax-and-apis/"
  },"154": {
    "doc": "JavaScript Arrays",
    "title": "Map, Filter, and Reduce",
    "content": ". | A pretty good explanation of map, filter, and reduce | map, filter, and reduce in a tweet | A Visualization of What Reduce Does | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-arrays/#map-filter-and-reduce",
    "relUrl": "/references/js-arrays/#map-filter-and-reduce"
  },"155": {
    "doc": "JavaScript Arrays",
    "title": "Extra",
    "content": ". | Eloquent JavaScript Chapter 5: Higher Order Functions - This is a pretty intense read but it includes examples of map, filter, and reduce. | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-arrays/#extra",
    "relUrl": "/references/js-arrays/#extra"
  },"156": {
    "doc": "JavaScript Arrays",
    "title": "JavaScript Arrays",
    "content": ". | MDN Loops and Iteration | MDN Array | MDN Bucles e iteraci√≥n, Arrays en espa√±ol | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-arrays/",
    "relUrl": "/references/js-arrays/"
  },"157": {
    "doc": "JavaScript Basics",
    "title": "Basics",
    "content": ". | MDN JS Guide | MDN JavaScript Basics | MDN JavaScript Basics Espa√±ol | JS for Cats If you want a low-key walk through of basics that is full of üò∫ üòº üòπ üêà‚Äç‚¨õ üêà, this is pretty helpful. It‚Äôs older so you will see references to the var keyword instead of let or const. | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-basics/#basics",
    "relUrl": "/references/js-basics/#basics"
  },"158": {
    "doc": "JavaScript Basics",
    "title": "Truthy and Falsy",
    "content": ". | JS Equality Table | MDN Falsy in JS | MDN Truthy in JS | MDN Truthy in JS Espa√±ol | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-basics/#truthy-and-falsy",
    "relUrl": "/references/js-basics/#truthy-and-falsy"
  },"159": {
    "doc": "JavaScript Basics",
    "title": "JavaScript Basics",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/js-basics/",
    "relUrl": "/references/js-basics/"
  },"160": {
    "doc": "JS & the DOM",
    "title": "Interacting with the DOM",
    "content": ". | DOM Manipulation with Vanilla JS | How JS Event Delegation Works | Chapters 13-15 of Eloquent JavaScript | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-dom/#interacting-with-the-dom",
    "relUrl": "/references/js-dom/#interacting-with-the-dom"
  },"161": {
    "doc": "JS & the DOM",
    "title": "Events",
    "content": ". | MDN Introduction to Events | MDN Element Events -&gt; this is where you can see the events that are defined for elements (like ‚Äúclick‚Äù or ‚Äúmouseover‚Äù) | MDN Event Reference -&gt; this is a huge list of all the available events, useful mainly to get an idea of what‚Äôs possible | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-dom/#events",
    "relUrl": "/references/js-dom/#events"
  },"162": {
    "doc": "JS & the DOM",
    "title": "Extra: Events",
    "content": "This is a good explanation about how JS events ‚Äúbubble‚Äù up the chain of elements on the page: . | JS Event Bubbling and Capturing | . If you would like to know more about the JavaScript Event Loop and how it works, I highly recommend this resource. Don‚Äôt miss the video of the conference talk that goes along with it ‚Äì it‚Äôs excellent: . | Loupe: Visualizing the JS Event Loop | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-dom/#extra-events",
    "relUrl": "/references/js-dom/#extra-events"
  },"163": {
    "doc": "JS & the DOM",
    "title": "Extra: Browser Rendering",
    "content": "Here is more info about what is happening when a browser renders a page ‚Äì very enlightening, although not strictly necessary at this stage. | About the browser rendering engine | How browser rendering works | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-dom/#extra-browser-rendering",
    "relUrl": "/references/js-dom/#extra-browser-rendering"
  },"164": {
    "doc": "JS & the DOM",
    "title": "Extra: DOM Structure",
    "content": "This resource is really not at all necessary to understand or work with the DOM, but if you want to know more about the concept of tree structures (like the DOM!) in computer science, check out this piece from Vaidehi Joshi‚Äôs BaseCS blog series. She is awesome! There is also a thoroughly delightful accompanying BaseCS podcast with the equally amazing Saron Yitbarek. | BaseCS blog series: How Not to be Stumped by Trees | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-dom/#extra-dom-structure",
    "relUrl": "/references/js-dom/#extra-dom-structure"
  },"165": {
    "doc": "JS & the DOM",
    "title": "JS & the DOM",
    "content": "Contents . | Interacting with the DOM | Events | Extra: Events | Extra: Browser Rendering | Extra: DOM Structure | . | CSS-Tricks: What Is the DOM? | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-dom/",
    "relUrl": "/references/js-dom/"
  },"166": {
    "doc": "JavaScript For React",
    "title": "Return to JS",
    "content": ". | MDN: A Re-Introduction to JS | The Modern JavaScript Tutorial -&gt; This is a solid and comprehensive reference with topics clearly labeled. | Clean Code: JavaScript -&gt; ‚ÄúClean Code‚Äù is a concept popularized by a book of the same name by Robert C. Martin. It means code that is easy to understand and easy to change. This guide applies these concepts to show you how to write clear and maintainable JavaScript. This is something that you will pick up as you go along, so don‚Äôt worry about ‚Äúfollowing the rules.‚Äù The rules are subjective and open to interpretation (as this guide shows). But it‚Äôs good to know that standards for code exist and developers are commonly expected to conform to them. | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-for-react/#return-to-js",
    "relUrl": "/references/js-for-react/#return-to-js"
  },"167": {
    "doc": "JavaScript For React",
    "title": "JS Syntax for React",
    "content": ". | Notes: JS for React | üì∫ ES6 tutorial for beginners | Airbnb JavaScript Style Guide Working together on a team is easier when everyone has the same standards for their code. Here is one popular style guide. | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-for-react/#js-syntax-for-react",
    "relUrl": "/references/js-for-react/#js-syntax-for-react"
  },"168": {
    "doc": "JavaScript For React",
    "title": "Modern JS Landscape",
    "content": ". | Modern JavaScript Explained for Dinosaurs -&gt; This is essential for context. | üìñ State of JS 2022 Survey Results -&gt; Skim for an overview of current trends in the JS ecosystem. | üì∫ Modern JavaScript for Django Developers | üìñ Modern JavaScript for Django Developers - this is the blog post version of the above talk. Read the first two parts only: . | Part 1: Organizing your Front-End Codebase in a Django Project | ‚≠êPart 2: A Crash Course in Modern JavaScript Tooling ‚Äì this is a complement to the first article on this list. | . | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-for-react/#modern-js-landscape",
    "relUrl": "/references/js-for-react/#modern-js-landscape"
  },"169": {
    "doc": "JavaScript For React",
    "title": "npm and Node",
    "content": ". | A Complete Beginner‚Äôs Guide to npm This is a bigger picture view that explains the context of npm ‚Äì start here. | Beginner‚Äôs Guide to npm This goes into detail about the commands you can use with npm | Dan Abramov, Broken by Design - Read this to understand the context for all the many security warnings and dire messages that appear in your terminal when you use npm. | Computer setup instructions for installing npm | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-for-react/#npm-and-node",
    "relUrl": "/references/js-for-react/#npm-and-node"
  },"170": {
    "doc": "JavaScript For React",
    "title": "Linting and Formatting",
    "content": ". | How to use Prettier in VS Code | How to use ESLint in VS Code | How to use Prettier with ESLint | . ESLint . | ESLint Plug-in for VS Code | ESLint Docs: Getting Started You probably don‚Äôt need to get too deep into this right now, but if you want to know more about configuring ESLint, this is the place to go. | How to Lint and Format Code with ESLint in VS Code This tutorial walks you through using ESLint in a more comprehensive way. | . Prettier . | Prettier Code Formatter This is information about the extenstion that you can (and should) install in VS Code. | How to format code with Prettier | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-for-react/#linting-and-formatting",
    "relUrl": "/references/js-for-react/#linting-and-formatting"
  },"171": {
    "doc": "JavaScript For React",
    "title": "JavaScript For React",
    "content": "Contents . | Return to JS | JS Syntax for React | Modern JS Landscape | npm and Node | Linting and Formatting . | ESLint | Prettier | . | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-for-react/",
    "relUrl": "/references/js-for-react/"
  },"172": {
    "doc": "Forms and Form Validation",
    "title": "Forms and Form Validation",
    "content": "Working with Forms . | MDN Forms Guide through ‚ÄúValidating and Submitting Form Data‚Äù | Code Academy Forms | Form Fields in Eloquent JavaScript, Chapter 18 | MDN Forms Guide | MDN HTML form element | MDN HTMLFormElement | MDN HTML input element | MDN HTML label element | MDN submit event | MDN Event.preventDefault | MDN Using FormData Objects | . Form Validation . | MDN Client-Side Form Validation | MDN HTML5 Constraint Validation | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-forms/",
    "relUrl": "/references/js-forms/"
  },"173": {
    "doc": "JavaScript Dates and Utilities",
    "title": "Working with Dates",
    "content": ". | MDN: JS Date Object | Moment.js - This is a very commonly used library for working with dates in JS. It‚Äôs big and kind of old, but handy for reformatting how dates are displayed. You could also check out modern alternatives: . | day.js | Luxon | date-fns | . | Blog post: Understanding Date and Time in JS | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-misc/#working-with-dates",
    "relUrl": "/references/js-misc/#working-with-dates"
  },"174": {
    "doc": "JavaScript Dates and Utilities",
    "title": "Utilities",
    "content": ". | Lodash - This is a JS utility library ‚Äì lots of handy little functions that can make it easier to do common things | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-misc/#utilities",
    "relUrl": "/references/js-misc/#utilities"
  },"175": {
    "doc": "JavaScript Dates and Utilities",
    "title": "JavaScript Dates and Utilities",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/js-misc/",
    "relUrl": "/references/js-misc/"
  },"176": {
    "doc": "JavaScript Objects",
    "title": "Basics",
    "content": ". | MDN JavaScript Object Basics | Eloquent JavaScript, chapter 4: Objects and Arrays | blog post on JS objects | More in-depth blog post on understanding objects in JS | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-objects/#basics",
    "relUrl": "/references/js-objects/#basics"
  },"177": {
    "doc": "JavaScript Objects",
    "title": "Extra",
    "content": ". | Rebecca Murphey on using objects to write more concise code (short video) | . ",
    "url": "https://momentum-team-16.github.io/course/references/js-objects/#extra",
    "relUrl": "/references/js-objects/#extra"
  },"178": {
    "doc": "JavaScript Objects",
    "title": "JavaScript Objects",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/js-objects/",
    "relUrl": "/references/js-objects/"
  },"179": {
    "doc": "Pro Tips for Learning To Code",
    "title": "Mindset",
    "content": ". | So You Want to Be a Wizard | Podcast on learning to code with the founder of Code Newbie, Saron Yitbarek | . ",
    "url": "https://momentum-team-16.github.io/course/references/learning/#mindset",
    "relUrl": "/references/learning/#mindset"
  },"180": {
    "doc": "Pro Tips for Learning To Code",
    "title": "üíÅ Asking Questions + Getting Help",
    "content": ". | Julia Evans, How To Ask Good Questions | Sasha Laundy, Your Brain‚Äôs API: Giving and Getting Technical Help This talk from PyCon 2015 is super useful and relevant. Worth 30 minutes of your time. | Our Student Guidelines: Getting Help | . ",
    "url": "https://momentum-team-16.github.io/course/references/learning/#-asking-questions--getting-help",
    "relUrl": "/references/learning/#-asking-questions--getting-help"
  },"181": {
    "doc": "Pro Tips for Learning To Code",
    "title": "Using VS Code",
    "content": "Writing code requires a special editor ‚Äì you can‚Äôt use Google Docs or MS Word. VS Code, the code editor we use at Momentum, is widely used in the industry. | Getting Started with VS Code, video | How to use VS Code LiveShare | VS Code LiveShare Extension | . ",
    "url": "https://momentum-team-16.github.io/course/references/learning/#using-vs-code",
    "relUrl": "/references/learning/#using-vs-code"
  },"182": {
    "doc": "Pro Tips for Learning To Code",
    "title": "Debugging Techniques",
    "content": ". | Julia Evans, A Debugging Manifesto | Rukia Sheikh-Mohamed, 5 Steps to Getting Unstuck | . ",
    "url": "https://momentum-team-16.github.io/course/references/learning/#debugging-techniques",
    "relUrl": "/references/learning/#debugging-techniques"
  },"183": {
    "doc": "Pro Tips for Learning To Code",
    "title": "Tech Pros Have Good Advice for You",
    "content": ". | Syntax.fm Podcast: Advice for New Devs | Katrina Owen, How to Fail Without Being a Loser | Tom Stuart, The Most Common Problem In Software Development And How To Fix It | . ",
    "url": "https://momentum-team-16.github.io/course/references/learning/#tech-pros-have-good-advice-for-you",
    "relUrl": "/references/learning/#tech-pros-have-good-advice-for-you"
  },"184": {
    "doc": "Pro Tips for Learning To Code",
    "title": "Pro Tips for Learning To Code",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/learning/",
    "relUrl": "/references/learning/"
  },"185": {
    "doc": "Models & Queries",
    "title": "üéØ Objectives",
    "content": ". | Designing your models | Deploying a Django app | Managers, lookups, and querysets | Using the Django shell to test out your models and make queries | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/models-and-queries/#-objectives",
    "relUrl": "/phase3-be/models-and-queries/#-objectives"
  },"186": {
    "doc": "Models & Queries",
    "title": "üèóÔ∏è Project: Building Habit Tracker",
    "content": "Today your models should be done, so you can begin building out the urls, views, and templates you will need. Before you write the code, plan for what you will need. A good way to do this is to sketch out what your user will see. There are examples for a lot of what you need to do in the Django Recipes codebase but you will have to adapt them to your Habit Tracker use cases. ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/models-and-queries/#%EF%B8%8F-project-building-habit-tracker",
    "relUrl": "/phase3-be/models-and-queries/#Ô∏è-project-building-habit-tracker"
  },"187": {
    "doc": "Models & Queries",
    "title": "üîñ References",
    "content": ". | Models, Queries, and Databases | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/models-and-queries/#-references",
    "relUrl": "/phase3-be/models-and-queries/#-references"
  },"188": {
    "doc": "Models & Queries",
    "title": "Models & Queries",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/models-and-queries/",
    "relUrl": "/phase3-be/models-and-queries/"
  },"189": {
    "doc": "Models and API Design",
    "title": "üéØ Objectives",
    "content": ". | Models for your collaborative project | Designing the endpoints you need | Setting CORS headers | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/models-api-design/#-objectives",
    "relUrl": "/phase3-be/models-api-design/#-objectives"
  },"190": {
    "doc": "Models and API Design",
    "title": "üèóÔ∏è Collaborative Project",
    "content": "Today you should have your models nailed down and be able to work with them in the admin and the shell ‚Äì that is, you can save them to the database and retrieve them, and all the relationships work properly (for example, can you create a new friend for a user, and query to see a user‚Äôs friends? Can you write a query to see a user‚Äôs friends‚Äô cards?). You should have a plan written down for at least the basic set of urls that your front-end will need. You may make changes to this as you go, but you need a place to begin. When creating your list of endpoints, remember to only build what you need. | What lists or collections of data will you need to return? There are probably some you can omit. | What single resources will you need to provide? | What HTTP methods will you need to support for each endpoint? (There are probably some you don‚Äôt need.) | Which routes will need the user to be authenticated and which do not require authentication? | Will you need to restrict any actions at the object level? For example, you‚Äôll probably want to make sure that only the owner of a resource can make changes to it, or add associated objects. | For each endpoint you are making, you should be able to answer the question: Why do we need this? If you don‚Äôt know, ask your front-end developers if they need it, and why. If no one has a good reason, then you should not make the endpoint. | . Goals by the next meeting . At minimum, your API should‚Ä¶ . | return JSON for GET requests for questions and answers OR cards and friends. | accept POST requests to create questions and answers OR cards and friends. | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/models-api-design/#%EF%B8%8F-collaborative-project",
    "relUrl": "/phase3-be/models-api-design/#Ô∏è-collaborative-project"
  },"191": {
    "doc": "Models and API Design",
    "title": "üîñ References",
    "content": ". | REST API Design | DRF in more depth | Permissions | CORS | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/models-api-design/#-references",
    "relUrl": "/phase3-be/models-api-design/#-references"
  },"192": {
    "doc": "Models and API Design",
    "title": "Models and API Design",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/models-api-design/",
    "relUrl": "/phase3-be/models-api-design/"
  },"193": {
    "doc": "Modern JavaScript",
    "title": "Objectives",
    "content": ". | Return to JavaScript! | The modern JavaScript ecosystem | ES6 features | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/modern-js/#objectives",
    "relUrl": "/phase3-fe/modern-js/#objectives"
  },"194": {
    "doc": "Modern JavaScript",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": "These are required readings, videos, and/or podcasts. Read, watch, or listen, and take notes. | ‚≠ê üìñ Modern JavaScript Explained for Dinosaurs -&gt; This is essential for context. | üìñ State of JS 2022 Survey Results Skim for an overview of current trends in the JS ecosystem. | üì∫ ES6 tutorial for beginners | üì∫ Modern JavaScript for Django Developers | üìñ Modern JavaScript for Django Developers - this is the blog post version of the above talk. Read the first two parts only: . | Part 1: Organizing your Front-End Codebase in a Django Project | ‚≠êPart 2: A Crash Course in Modern JavaScript Tooling | . | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/modern-js/#-read---watch---listen",
    "relUrl": "/phase3-fe/modern-js/#-read---watch---listen"
  },"195": {
    "doc": "Modern JavaScript",
    "title": "üéØ To Do",
    "content": ". | Review the code in JavaScript You Need to Know for React. You‚Äôll need to be able to read and use the JS in these notes to work with React effectively. It would be valuable practice to type out the examples and run them yourself. | Complete at least three exercises from this list on Exercism.io JavaScript Track. You‚Äôre encouraged to work together! . | . | Isogram | Scrabble Score | ETL | Simple Cipher | Hamming | Gigasecond | Grade School | . Read the tests provided with each exercise by clicking on the Tests tab in the editor (or opening the test file if you are using the CLI). The tests will show you exactly how the function you‚Äôre supposed to write will be called and with what arguments. üí´ PRO TIPS . | If your exercises are locked you need to switch from Learning Mode to Practice Mode. Here‚Äôs a short video showing you how to do that. | When you run the tests, only focus on ONE test at a time. Write code that will get that test ‚Äì and ONLY that test ‚Äì passing. Then, when you have one passing test, look at the next failing test. Again, just that one! Write code to pass this test. This may require you to rewrite the code you just wrote to pass the first test. That‚Äôs ok. Writing code like this is called Test-Driven Development (TDD) and it‚Äôs a useful skill to practice. One test at a time, try to keep previously tests passing, read the test results each time carefully, and be patient. | If you get through two, keep going! More practice is better. | . Please come to the front-end team meeting with either/both of the following: . | a solution you got working | a question about something that blocked your progress | . üîñ References . | JS for React | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/modern-js/#-to-do",
    "relUrl": "/phase3-fe/modern-js/#-to-do"
  },"196": {
    "doc": "Modern JavaScript",
    "title": "Modern JavaScript",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/modern-js/",
    "relUrl": "/phase3-fe/modern-js/"
  },"197": {
    "doc": "Multiple Components and Conditional Rendering",
    "title": "üéØ Objectives",
    "content": ". | Troubleshooting AJAX requests | Using multiple components and conditional rendering to create multiple views of your application | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/multiple-components/#-objectives",
    "relUrl": "/phase3-fe/multiple-components/#-objectives"
  },"198": {
    "doc": "Multiple Components and Conditional Rendering",
    "title": "üèóÔ∏è Project: Continuing React Trivia",
    "content": "Be methodical in your approach and don‚Äôt try to do too much at once. It can help to talk with other developers to break the project down into steps you can take. Goals in the order you should tackle them: . | Get a list of categories from the Trivia API showing up on the page. | Make your trivia categories selectable. When a user clicks on a category to select it, you should make a request to get at least 10 questions for that category (note: the API will let you specify how many questions you want to get back and it will let you specify the type (e.g., multiple choice). | If you can get all the questions for the selected category, the next step is to show the questions. Ideally you want to show one question at at a time with answer choices for that question. | If this is too hard, just show the first question to start with. | Next, show the answer choices for that question (don‚Äôt worry about the order at first; you can change that later). | When you can show one question with its answer choices, then make it possible for the user to see the next question in the list of questions by clicking a button | . | Make it possible for the user to select their answer choice. You will need to know what answer they selected, and you will need to know the correct answer. They got the answer right if the answer they selected is the same as the correct answer ‚Äì so you‚Äôll need to compare those two values somehow. | Tell the user if they got the question right. | OR keep track of questions answered correctly and tally them at the end (something like, ‚ÄúYou got 6 out of 10 questions right!‚Äù). | . | Have a way for the quiz to end. Optionally, go back to the list of categories to start another quiz. | . If you read a goal and don‚Äôt know how to do it, break it down into smaller goals. You may find that you need to do this a few times to break tasks down into smaller and smaller bits. This is more than OK: it‚Äôs a smart way to work, and all developers do it. By the end of the week you should have the first three goals done, or at least the first two and the third in progress. ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/multiple-components/#%EF%B8%8F-project-continuing-react-trivia",
    "relUrl": "/phase3-fe/multiple-components/#Ô∏è-project-continuing-react-trivia"
  },"199": {
    "doc": "Multiple Components and Conditional Rendering",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": "Re-visit anything from yesterday‚Äôs reading/watching/listening that you didn‚Äôt get to, and: . | Why React Re-Renders | Lifting State Up ‚Äì This is the official doc page, so it includes examples with older React sytax using JavaScript classes for components. To see it with hooks, watch the video Lifting State Up with Hooks. | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/multiple-components/#-read---watch---listen",
    "relUrl": "/phase3-fe/multiple-components/#-read---watch---listen"
  },"200": {
    "doc": "Multiple Components and Conditional Rendering",
    "title": "üîñ References",
    "content": ". | Conditional Rendering in React | Managing State in React | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/multiple-components/#-references",
    "relUrl": "/phase3-fe/multiple-components/#-references"
  },"201": {
    "doc": "Multiple Components and Conditional Rendering",
    "title": "Multiple Components and Conditional Rendering",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/multiple-components/",
    "relUrl": "/phase3-fe/multiple-components/"
  },"202": {
    "doc": "Posts",
    "title": "Posts &amp; Announcements",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/daily-update#posts--announcements",
    "relUrl": "/daily-update#posts--announcements"
  },"203": {
    "doc": "Posts",
    "title": "Creating Tasks on Your Trello Board",
    "content": "Thursday February 16, 2023 ",
    "url": "https://momentum-team-16.github.io/course/daily-update",
    "relUrl": "/daily-update"
  },"204": {
    "doc": "Posts",
    "title": "‚úÖ TODO: Create tasks on your Trello board today",
    "content": "Your team‚Äôs Trello board is ready with columns predefined to start you off. You are welcome to adapt it and create additional columns to support the way your team works. You should put your user stories on your Trello board in the User Stories column. You‚Äôll find a template card for user stories that you can copy if you want. Then, break them down into tasks and put tasks on cards. How to make cards . | Task cards go in the Backlog column. | Use the Task Card template. | One task per card | Each task should be doable in a day or less. | Don‚Äôt assign tasks to anyone yet. | Link a task back to its user story card using the User Story field. | Each card must include how you will know when the task is done (its ‚Äúdefinition of done‚Äù). | . ",
    "url": "https://momentum-team-16.github.io/course/daily-update#-todo-create-tasks-on-your-trello-board-today",
    "relUrl": "/daily-update#-todo-create-tasks-on-your-trello-board-today"
  },"205": {
    "doc": "Posts",
    "title": "Your Team‚Äôs Trello Board",
    "content": "These are invite links to join your team‚Äôs Trello board. You may be asked to create a free Trello account once you click on the link to join the board. You have to join the board through this link. | Team Austin 316 Trello Board | Team Pepa Trello Board | . ",
    "url": "https://momentum-team-16.github.io/course/daily-update#your-teams-trello-board",
    "relUrl": "/daily-update#your-teams-trello-board"
  },"206": {
    "doc": "Posts",
    "title": "üõπ Defining MVP",
    "content": "Tuesday February 14, 2023 ",
    "url": "https://momentum-team-16.github.io/course/daily-update",
    "relUrl": "/daily-update"
  },"207": {
    "doc": "Posts",
    "title": "‚úÖ TODO for your project team today",
    "content": "1. Post your team charter in your team‚Äôs Slack channel. Please pin or bookmark it at the top of the channel so that it can be referenced easily. 2. What is your app and what does it do? . Your first and most important goal today is to answer that question. 3. Clearly define your team‚Äôs Minimum Viable Product (MVP). Talk through features your app might have and then narrow them down to the most essential. ",
    "url": "https://momentum-team-16.github.io/course/daily-update#-todo-for-your-project-team-today",
    "relUrl": "/daily-update#-todo-for-your-project-team-today"
  },"208": {
    "doc": "Posts",
    "title": "üëæ Welcome to Phase 4 üëæ",
    "content": "Monday February 13, 2023 The past few months have prepared you to take on the challenge ahead in these next four weeks. You may not feel ready, but you ARE. At the end of this phase, your team will present your product to an audience of local tech professionals, hiring partners, and the Momentum community. ",
    "url": "https://momentum-team-16.github.io/course/daily-update",
    "relUrl": "/daily-update"
  },"209": {
    "doc": "Posts",
    "title": "‚úÖ TODO this morning",
    "content": ". | üïõ BY NOON: Make sure you have filled out this survey about your interests and intentions for Phase 4. | üåü Read this post for an engineer‚Äôs perspective on an approach to building software that parallels almost precisely the approach we take in Phase 4: How we use ‚Äúship small‚Äù to rapidly build new features at GitHub | üíú Are you a Chaos Muppet or an Order Muppet? Read this post and post your personal findings in Slack üëÄ. | . ",
    "url": "https://momentum-team-16.github.io/course/daily-update#-todo-this-morning",
    "relUrl": "/daily-update#-todo-this-morning"
  },"210": {
    "doc": "Posts",
    "title": "‚úÖ TODO this afternoon with your project team",
    "content": "üëâ Teams! Slides . | Create a Slack channel (please create an actual channel, not a thread) and add team members, Amy, and Rebecca to it. | Create a team charter with your team and pin or bookmark it in your team‚Äôs Slack channel. This is an agreement you create together to determine the expectations you have for each other and ensure you can met your goals. Use your experience working on teams in the past to figure out what will help you work together with a minimum of friction and a maximum of productivity. Here are references to help you with creating this agreement. | Brainstorm ideas for your final project with your team, and be ready to pitch one or two ideas tomorrow morning. | . ",
    "url": "https://momentum-team-16.github.io/course/daily-update#-todo-this-afternoon-with-your-project-team",
    "relUrl": "/daily-update#-todo-this-afternoon-with-your-project-team"
  },"211": {
    "doc": "Posts",
    "title": "Peer Feedback: Collaboration Skills",
    "content": "Thursday February 9, 2023 Working on a software engineering team requires a great deal of skill, and not just on the technical side. The skills you need to collaborate successfully can be learned and practiced and can grow over time. This short video explains why a growth mindset in a professional context is valuable to employers and employees alike. The purposes of peer feedback include: . | to encourage folks to keep doing what is helpful and productive for the team | to demonstrate how one‚Äôs actions affect others | to highlight specific areas to practice and improve on in Phase 4 and beyond | . Honest feedback is valuable when offered respectfully and in the spirit of kindness and cooperation. Creating software is a team sport! . ‚úÖ Please fill out this form by tomorrow at noon for the people you are assigned to review. You‚Äôll get a message from me in Slack letting you know who you should submit feedback for, but you are also welcome to submit feedback for anyone else I haven‚Äôt assigned. ",
    "url": "https://momentum-team-16.github.io/course/daily-update",
    "relUrl": "/daily-update"
  },"212": {
    "doc": "Posts",
    "title": "Wrapping Up the Collaborative Project",
    "content": "Tuesday February 7, 2023 ",
    "url": "https://momentum-team-16.github.io/course/daily-update",
    "relUrl": "/daily-update"
  },"213": {
    "doc": "Posts",
    "title": "üéØ The Definition of Done",
    "content": "üëâ If your project meets minimum requirements today, HUZZAH! That is awesome. You should be working on at least one additional or spicy feature. üëâ If your project does not yet meet minimum requirements, your goal should be meeting them by the end of the day tomorrow. Please include a README in your project repo. The README should: . | be titled README.md and live at the root of your project repo | be written in Markdown | include a link to your production application | have instructions for getting your application running locally, so that any developer could pull it down and run it | Backend: your README must include documentation for your API‚Äôs available endpoints | . ",
    "url": "https://momentum-team-16.github.io/course/daily-update#-the-definition-of-done",
    "relUrl": "/daily-update#-the-definition-of-done"
  },"214": {
    "doc": "Posts",
    "title": "Minimum Requirements for Social Cards",
    "content": ". | A user is able to sign up/register to be a user of your app. | A user is able to log in to the app, and log out. | A user can see a list of all the cards from all users of the app. | A user can see a list of all the cards they‚Äôve created. | A user can see the details of a single card (with front and back messages). | A user can create a new card. | A user can update a card they created. | A user can delete a card they created. | A user can follow another user. | A user can unfollow another user. | A user can see a list all cards created by a user that they follow. | A user can see a list all the users they follow. | Your repo includes a README with project documentation. | Front end: your app is styled in a way that looks finished. | . Back-end Notes . Depending on how you‚Äôve constructed your API, you might have separate endpoints for all of the above, or some of the functionality might be combined in a single endpoint (for instance, if you nested answers in the question detail endpoint, like questions/4/answers). What matters is that your front-end team can perform all the necessary actions to provide full functionality to the user and that your endpoints are accurately documented in your README. ‚ö†Ô∏è Be sure to test that you have implemented permissions-checking correctly for these endpoints. For example, your API should not allow a user who is not the creator of a card to update a card. ",
    "url": "https://momentum-team-16.github.io/course/daily-update#minimum-requirements-for-social-cards",
    "relUrl": "/daily-update#minimum-requirements-for-social-cards"
  },"215": {
    "doc": "Posts",
    "title": "Completing Phase 3",
    "content": "Monday February 6, 2023 To wrap up Phase 3, you‚Äôll finish the Social Cards project and create a short video walk-through of your code. The project is due by EOD on Thursday, February 9. The video is due at 9:00 am ET Friday, February 10. ",
    "url": "https://momentum-team-16.github.io/course/daily-update",
    "relUrl": "/daily-update"
  },"216": {
    "doc": "Posts",
    "title": "‚úÖ Requirements for passing the phase (for both front-end and back-end)",
    "content": ". | Your application meets the minimum requirements detailed in the assignment. | Your application runs without errors in production. | Your application repo includes a README with a link to your production application and instructions for running the application locally. | Your presentation video meets the below requirements. | . You might not pass the phase if: . | Your project is incomplete or does not meet the minimum requirements. | Your project is not running in production. | You have not made a substantive contribution to the project (i.e., you have committed meaningful code to the project). | You cannot explain how your code works. | You do not turn in a video. | . üìπ Video Presentations . Each of you (not each team, but each individual) will record a screencast on one of the topics listed below. The video should be 4-5 minutes long, and no longer. Your target audience is a Momentum learner who is just at the beginning of Phase 3. Imagine you are teaching them how to do what you‚Äôve done in this project. Give them the benefit of your experience over these past several weeks. This video does not have to be polished, scripted, or edited. But your viewer should be able to follow what you‚Äôre saying and understand the points you are making. If you don‚Äôt already have a tool you‚Äôre familiar with to record your video, Loom is very simple to use for screencasts and will let you share your video easily. The free account also limits your videos to 5 minutes, so it should help you with timing. You can record a screencast with or without your face showing; either way is fine. | Getting Started with Loom | Loom Chrome Extension | . Please post your video and submit the url for it using this form. Your videos are due by 9:00 am ET on Friday, February 10. Video Presentation Requirements . Back End . Your target audience is another beginner developer who is familiar with Django but not with DRF, Postgres, or deployment. Your video should include a demo of your application via relevant requests in Insomnia and should show and walk through your code. You must use the production endpoints in the demo, not localhost. Please focus on one of these topics. | Demo 1-3 endpoints in your application, explaining how you implemented them. Did you make any interesting decisions or customizations along the way? You might talk about some or all of these topics: the url patterns; the HTTP methods that are handled; serializers; permissions; querysets and any filtering you may have done. | Take one or more of the models you created for your project and explain their design. Why did you design your model(s) the way you did? Some things you probably want to talk about: the relationships a model has with other models, and why you need them; any custom methods you wrote for a model; any queries you did with your models that were tricky or interesting; anything you learned about how to work with models doing your project. | What is the most interesting specific feature or technical detail that you implemented for this project? Explain its functionality and implementation ‚Äì that is, what it does and how it does it. | . Front End . Your target audience is another beginner developer who is familiar with JavaScript but not with React or deployment. Your video should include a demo of the relevant part of your application running in the browser in production, not on localhost, and should show and walk through your code. Please focus on one of these topics. | Walk us through the code for one of the components in your app and explain how it works. Topics you might touch on: what the purpose/responsibility of the component is; when and where it is rendered; what props it receives from its parent; any state the component has, what it‚Äôs for, and how it changes; any events that component handles; any hooks used in the component besides useState (e.g., useEffect, useRef, useLocalStorageState). | Build a new teeny tiny React application from scratch and talk us through some of the basics, including components, state, and props. You can start after creating a new create-react-app application and npm installing all the things. Your application should have at least one component that does something ‚Äì for example, you could show how to build an input form that echos whatever your user types and displays it on the page in real time. If you want to get fancier than this, you can ‚Äì just keep it to 5 minutes. | Explain how you have used React Router to implement routes in your app. What URLs can your app handle? How do you handle navigation from component to component? | . ",
    "url": "https://momentum-team-16.github.io/course/daily-update#-requirements-for-passing-the-phase-for-both-front-end-and-back-end",
    "relUrl": "/daily-update#-requirements-for-passing-the-phase-for-both-front-end-and-back-end"
  },"217": {
    "doc": "Posts",
    "title": "Peer Feedback",
    "content": "Peer feedback is often included in workplace review processes (sometimes it‚Äôs called a 360¬∫ review), focusing on the collaborative nature of work. In software engineering, effective collaboration skills make you a valuable employee and contributor. We‚Äôre piloting an assessment of collaboration skills in Phase 3 that asks your teammates to evaluate the experience they have had working with you. Each person will be asked to fill out a form for other folks they have worked with throughout the course. How will the feedback be collected? . The feedback will be anonymous. I‚Äôll give you a Google form and assign you, privately, to the folks you will be asked to submit feedback for. I‚Äôll share the forms at the end of this week. For each person, you‚Äôll be asked to provide feedback on a scale of 1-5, from strongly disagree to strongly agree, on the following collaboration skills: . | They communicate effectively. | If you communicate effectively, you do things like: . | respond to messages on Slack promptly | check in with teammates often | proactively provide information that others need to know without waiting to be asked | let teammates know what you are working on | explain and share your ideas | . | . | They collaborate effectively. | If you collaborate effectively, you: . | ask what others think | listen carefully to other people‚Äôs ideas | revise your ideas based on the ideas of others | compromise and seek consensus | find ways to share the work | . | . | I can rely on them to do what they say they will do and to meet deadlines. | They take on a fair or equal share of the work. | They are considerate about not blocking the progress of others. | They offer and provide help if needed and readily share what they know. | They demonstrate that they care about delivering a great product. | They treat me and others with respect. | They show initiative and creativity in solving problems and finding solutions. | I enjoy collaborating with them and would work with them again. | . There is one open-ended question on the feedback form: . What is the best thing about working with this person? What do you appreciate most about the work they do, or the way they work? . üëâ I‚Äôll share all the feedback about you with you. ",
    "url": "https://momentum-team-16.github.io/course/daily-update#peer-feedback",
    "relUrl": "/daily-update#peer-feedback"
  },"218": {
    "doc": "Posts",
    "title": "FE + BE Collaborative Project",
    "content": "Monday January 30, 2023 This week you will begin work on a project with both front- and back-end teammates. This project is due at the end of the Phase, on Thursday, February 9. In order to successfully complete the phase: . | This project must be complete and meet the minimum requirements. | It must be deployed and running without errors in production. | Each team member must make a substantive contribution to the project (this is best demonstrated through frequent, well-formed commits). | Each team member must be able to explain how the project works (that is, back-end devs know how the back-end works; front-end devs know how the front-end works). | . The front-end will build a React application that will make AJAX requests to the back-end application built with Django and Django REST Framework. There are no strict rules about who works on front-end or back-end, so your team can decide how best to use your resources. Your team can choose between two projects. They will both give you practice doing what you have been doing (building an API or building a React application) but they present some different problems to solve. Choose the one that sounds more fun or interesting to you. We haven‚Äôt yet covered everything you‚Äôll need to be able to do this project, so that will be our task this week and next. ",
    "url": "https://momentum-team-16.github.io/course/daily-update",
    "relUrl": "/daily-update"
  },"219": {
    "doc": "Posts",
    "title": "üèóÔ∏è Project: Social Cards or QuestionBox",
    "content": "üîó GitHub Project Invitation Link . How to accept the assignment and create the repos on GitHub . The back end will work in their own repo and the front end will work in their own repo, so for the same project there will be two repos. One back-end dev should accept the assignment invitation and create a new team; name the team something like ‚ÄúTeam Yeti Back-end‚Äù (whatever your team name is!). Then the other back-end dev(s) should accept the assignment and choose the right team. All back-end folks on the team clone that same repo. One front-end dev should accept the assignment invitation and create a new team; name the team something like ‚ÄúTeam Yeti Front-end‚Äù (whatever your team name is!). Then the other front-end dev(s) should accept the assignment and choose the right team. All front-end folks on the team clone that same repo. ‚ö†Ô∏è You have to accept the invitation and join the team your teammate created in order to have write permissions to the repo. Today you should not need to commit or push any code since your main goal is planning. Tomorrow you will learn how to work with others in a shared repo. The Teams . Team Clapton . | Jerome | Jacob | . Team Slash . | Lucian | Cameron | (Jacob on backend) | . Team Hendrix . | Capel | Daniel | Marcus | (Jerome on backend) | . How to work as one team . Even though you have separate codebases and separate applications, you‚Äôre working together to ship a single product, on time. You can make product decisions together even though you will implement features separately. We‚Äôll check in on the projects in class; front and back end teams will continue to meet separately. Come to your front-end or back-end meeting prepared to give progress reports and ask for help on what you‚Äôre working on. You are encouraged to work with the other front-end or back-end devs on other teams to share ideas, solutions, and resources. ü•Ö Your Goals Today ü•Ö . | Read each project‚Äôs README. | Decide which project you want to do. | Read your project‚Äôs README again, carefully. | Understand the project requirements thoroughly and discuss with your team what you need to build. | Outline a detailed plan for how your team will implement the project requirements. | WRITE YOUR PLANS DOWN. You can use any tools you like as long as the content you create is shareable. Some tools that might be useful: Trello, Google Docs, Excalidraw, Miro. Make sure everyone on your team has access to this documentation. | . Front-end . You will need to sketch out the user flow and draw up some wireframes for the application. It can help to ask questions like: . | What does our user see when they first land on our site? | What will they need to do here? | How will they accomplish that? | What will happen next? | If they click on a button or link, what happens? | What does the UI look like after the user clicks on something / follows a link / submits a form? | . By tomorrow front-end should have . | A detailed user flow plan/diagram | Detailed wireframes | A good initial plan of the components you think you will need | . Back-end . You will need to draw ER diagrams to plan out the models and start a list of endpoints you think you will need. It can help to ask questions like: . | What are the nouns in your project requirements? These are likely models. | What data will you need to save in your database so you can look it up again later? | What information will the front-end need so they can accomplish the UI that they are planning? | What permissions will need to be in place? | . By tomorrow back-end should have . | ER Diagrams for your models | A list of endpoints | A good initial plan for the JSON you think you will need to return | . Git Workflow . Working with other developers in a shared codebase means that the workflow you‚Äôve been using so far will have to change. We will cover this together on Tuesday. If you want to get a head start, here are the slides for reference. Git Collaboration slide deck . ",
    "url": "https://momentum-team-16.github.io/course/daily-update#%EF%B8%8F-project-social-cards-or-questionbox",
    "relUrl": "/daily-update#Ô∏è-project-social-cards-or-questionbox"
  },"220": {
    "doc": "Posts",
    "title": "Welcome to Phase 3",
    "content": "Tuesday January 17, 2023 ",
    "url": "https://momentum-team-16.github.io/course/daily-update",
    "relUrl": "/daily-update"
  },"221": {
    "doc": "Posts",
    "title": "How the Advanced Phase Works",
    "content": "During this phase, there are separate meetings and topics for front-end and back-end development. See the schedule for details. Your team meets either during the morning or the afternoon. The rest of the day is project time, so we‚Äôll expect to see you online and working. Please let us know if you will be unavailable during work hours. During project time, please read/watch/listen to the required readings, videos, and podcasts and work on your projects. Come to meetings prepared to ask questions. You are welcome to use the team Zoom meeting and/or the co-working Zoom during project work hours. ",
    "url": "https://momentum-team-16.github.io/course/daily-update#how-the-advanced-phase-works",
    "relUrl": "/daily-update#how-the-advanced-phase-works"
  },"222": {
    "doc": "Posts",
    "title": "ü§® What does ‚ÄúAdvanced‚Äù Even Mean?",
    "content": "We don‚Äôt expect you to know how to do anything in Phase 3. We do expect you use all the resources at your disposal to figure it out. You can‚Äôt learn how to code by studying or memorizing. The only way to learn is to write code ‚Äì and you have to do that before you really understand it. By trying things, and running code, you learn what code does and how it works. Experience is built on doing the work. For an insightful take on being comfortable with what you don‚Äôt know, read this great blog post by one of the most well-respected and influential JavaScript developers out there right now: Dan Abramov, Things I Don‚Äôt Know . ",
    "url": "https://momentum-team-16.github.io/course/daily-update#-what-does-advanced-even-mean",
    "relUrl": "/daily-update#-what-does-advanced-even-mean"
  },"223": {
    "doc": "Posts",
    "title": "‚úÖ TODO for Everyone for the First Week",
    "content": ". | Complete this Goals Reflection exercise to re-energize for what‚Äôs ahead and focus on what you want to accomplish. | Reflect on where you are in this program. You‚Äôve learned a lot and you have a lot left to learn. What are YOUR goals? | Post a tip from your CONTINUE list, or a request for advice for something that you‚Äôve been struggling with to our team Slack channel. | . | Create a schedule that you can stick to for the times you will not be meeting with the team. See the time management references for some suggestions on managing your time effectively. | Learn Markdown | Pick a note-taking application that will let you take notes while you read and work. | . ",
    "url": "https://momentum-team-16.github.io/course/daily-update#-todo-for-everyone-for-the-first-week",
    "relUrl": "/daily-update#-todo-for-everyone-for-the-first-week"
  },"224": {
    "doc": "Posts",
    "title": "Posts",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/daily-update",
    "relUrl": "/daily-update"
  },"225": {
    "doc": "Orientation and Setup",
    "title": "First Day Orientation",
    "content": ". | Student guidelines | How we work remotely | Tutorial on Using Slack | Momentum Slack guidelines | . ",
    "url": "https://momentum-team-16.github.io/course/references/orientation/#first-day-orientation",
    "relUrl": "/references/orientation/#first-day-orientation"
  },"226": {
    "doc": "Orientation and Setup",
    "title": "Computer Setup",
    "content": "Newer Apple laptops have an Apple Silicon chip. If you aren‚Äôt sure what you have, try the Apple Silicon instructions, which will show you how to confirm that you have that chip. | ‚≠ê Instructions for computers with an Apple Silicon chip | ‚≠ê Instructions for computers with an Intel chip | . ",
    "url": "https://momentum-team-16.github.io/course/references/orientation/#computer-setup",
    "relUrl": "/references/orientation/#computer-setup"
  },"227": {
    "doc": "Orientation and Setup",
    "title": "Orientation and Setup",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/orientation/",
    "relUrl": "/references/orientation/"
  },"228": {
    "doc": "Phase 3 Back End",
    "title": "Advanced Back End with Django and Django REST Framework",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/#advanced-back-end-with-django-and-django-rest-framework",
    "relUrl": "/phase3-be/#advanced-back-end-with-django-and-django-rest-framework"
  },"229": {
    "doc": "Phase 3 Back End",
    "title": "Phase 3 Back End",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/",
    "relUrl": "/phase3-be/"
  },"230": {
    "doc": "Phase 3 Front End",
    "title": "Advanced Front End with React",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/#advanced-front-end-with-react",
    "relUrl": "/phase3-fe/#advanced-front-end-with-react"
  },"231": {
    "doc": "Phase 3 Front End",
    "title": "Phase 3 Front End",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/",
    "relUrl": "/phase3-fe/"
  },"232": {
    "doc": "Phase 4",
    "title": "Agile Development",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase4/#agile-development",
    "relUrl": "/phase4/#agile-development"
  },"233": {
    "doc": "Phase 4",
    "title": "Phase 4",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase4/",
    "relUrl": "/phase4/"
  },"234": {
    "doc": "Project Checklists",
    "title": "üèÉ‚Äç‚ôÄÔ∏è Your First Sprint",
    "content": "Today should be used for finalizing planning and doing research on data, technology, and tools you might need. The following checklists will help you get ready to start writing code. ‚úÖ Checklist for the whole team, before you write code . | Every team member is clear on your MVP, and you know exactly what you are building. | You have added user stories and tasks (at minimum, for MVP) to your Trello board Backlog, and you have first tasks queued in Current Sprint. | You have created a team organization on GitHub and added every team member. | You have created your project repo or repos on GitHub and made sure everyone is added as a collaborator. | Make sure you have a .gitignore file! You can get one that is specific to your project at gitignore.io. Even more handy: use this VS Code extension. | . | Everyone is clear on the Git and GitHub workflow your team will follow. | Consider appointing a team lead who can be responsible for running meetings, leading at check-in, and looking after the Trello board. Even better: rotate this role to share the responsibility. | . ‚úÖ Back-end Checklist . | Models! How will you represent the nouns your project needs? . | What fields belong on those models? Use the Django Model Field Reference. | What relationships exist between the models? (one-to-many, many-to-many?) . | Consider using the CRC model to help guide your discussions. | You should create an ER (entity relationship) diagram for your models to map relationships. This may change as you work, but you should have thought through and documented your plan to start with. | . | . | What data will the front end rely on the back end for? | What endpoints will you need to deliver that data? . | Are you returning HTML? What templates does the front end need, and who will make those? | Are you returning JSON? How will you structure your data? | . | üö® Make sure you are using django-environ and a .env file. This will be especially important for secret keys and sensitive info, like AWS credentials. DON‚ÄôT COMMIT YOUR SECRET KEYS! | Make sure you are using Postgres and not SQLite. | Deploy early. | Make sure more than one person on your team has access to the dashboard on Render. | Make sure that you keep an eye on your production app! Every time you merge a pull request and the main branch changes, it will trigger a new deploy, so you should check and test your app to confirm that your newest code is working in production. | . | Put documentation in place early and make sure your front end has access to it. | . ‚úÖ Front-end Checklist . | Have you mapped out a user flow through your app? | Wireframes for each interface the user will see . | What URL corresponds to each page or interface the user sees? (with or without React Router) | What data will you need on each page or interface? Where is it coming from? | What requests will you need to make from the front end? | . | Are you making forms? Discuss data with the backend. | What assets (e.g. images, logos) will you need? | General strategy for CSS and design so that you can budget time for it. | Are you using a CSS library (e.g. Material UI, Bulma)? What is the general look and feel of your app? | Start to think about UI/UX and design | . | Deploy early. | Make sure that more than one person on your team has access to the Netlify dashboard for your app (Netlify docs on adding site members). | Keep an eye on the production app! | Every time you merge a pull request and the main branch changes, it will trigger a new deploy, so you should check and test your app to confirm that your newest code is working in production. | . | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/project-checklists/#%EF%B8%8F-your-first-sprint",
    "relUrl": "/phase4/project-checklists/#Ô∏è-your-first-sprint"
  },"235": {
    "doc": "Project Checklists",
    "title": "Project Checklists",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase4/project-checklists/",
    "relUrl": "/phase4/project-checklists/"
  },"236": {
    "doc": "Components, Props, and State",
    "title": "üéØ Objectives",
    "content": ". | Review first impressions of React | Build a small React app together | Components and JSX | Handling data in React with props and state | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/props-and-state/#-objectives",
    "relUrl": "/phase3-fe/props-and-state/#-objectives"
  },"237": {
    "doc": "Components, Props, and State",
    "title": "üèóÔ∏è Project: Freeshelf | Slideshow",
    "content": "Today, you‚Äôll start on your first React app without a tutorial. This is due on Monday, January 23. React Freeshelf . This should be challenging for a React beginner, but if you finish it early, please do this additional project: . React Slideshow . üß∞ Please be sure to install AND USE the React Developer Tools for Chrome. ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/props-and-state/#%EF%B8%8F-project-freeshelf--slideshow",
    "relUrl": "/phase3-fe/props-and-state/#Ô∏è-project-freeshelf--slideshow"
  },"238": {
    "doc": "Components, Props, and State",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": ". | üìñ What is React? A Visual Introduction for Beginners | üìñ React Mental Model: Cutting Holes in HTML | üìñ Using the State Hook | üéß Podcast: Advice for New Devs If you haven‚Äôt listened to this yet, don‚Äôt miss it. | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/props-and-state/#-read---watch---listen",
    "relUrl": "/phase3-fe/props-and-state/#-read---watch---listen"
  },"239": {
    "doc": "Components, Props, and State",
    "title": "üîñ References",
    "content": ". | JS for React | React Concepts | React Docs for Getting Started | Managing State | Lightweight CSS Libraries | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/props-and-state/#-references",
    "relUrl": "/phase3-fe/props-and-state/#-references"
  },"240": {
    "doc": "Components, Props, and State",
    "title": "Components, Props, and State",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/props-and-state/",
    "relUrl": "/phase3-fe/props-and-state/"
  },"241": {
    "doc": "Python Basics",
    "title": "Python Basics",
    "content": "Contents . | Set Up Your Python Dev Environment | Essential Python References | RealPython: Basic Python Tutorials | üìì Jupyter Notebooks | . Set Up Your Python Dev Environment . | üõ† Follow these instructions to install Python and other tools you‚Äôll need | . Essential Python References . | ‚≠ê Official Python docs | ‚≠ê Documentaci√≥n de Python en Espa√±ol | üêç The Python Standard Library | üêç La Biblioteca Est√°ndar de Python | üìö Python for Everybody | üìö Python Para Todos en Espa√±ol | LearnPython Tutorial -&gt; A good reference with examples and exercises. | A Byte of Python -&gt; Use this as a reference, starting at First Steps. DO NOT follow the installation instructions to download Python ‚Äì you already have Python installed! | Automate The Boring Stuff Kind of like the equivalent to Eloquent JavaScript for Python. Lots of written explanation with great examples. | . RealPython: Basic Python Tutorials . These articles are way more in-depth than you need right now, but they are good references for more information, if you feel you need that. | Basic Data Types | Variables | Operators and Expressions | Strings | Python Program Lexical Structure | Conditional Statements | While Loops | For Loops | Basic Input and Output | String Formatting | Defining Your Own Python Function | Docstrings in Python | . üìì Jupyter Notebooks . | RealPython: Using Jupyter Notebooks (video) | RealPython: Jupyter Notebook: an Introduction | Setting Up Your Python Development Environment: Jupyter Notebooks section | Using Jupyter Notebooks in VSCode -&gt; This is an alternate way to run Jupyter Notebooks locally. | . ",
    "url": "https://momentum-team-16.github.io/course/references/py-basics/",
    "relUrl": "/references/py-basics/"
  },"242": {
    "doc": "Django",
    "title": "Django",
    "content": "Contents . | Intro to Django | Getting Started with the Database in Django | Debugging Django | Models and Queries | Authentication, Registration, and the User Model in Django | URLs and Templates | Django Packages | Related Python &amp; Django References | Images | Forms in Django | Custom Management Commands | . Intro to Django . | Thinkific Django | MDN: Django Introduction | MDN: Introducci√≥n a Django (Espa√±ol) | Official Django documentation | Documentaci√≥n de Django (Espa√±ol) | Django Topic Guide (this is a useful table of contents for the Django docs) | Pretty Printed Django Videos: Videos 1-10 are the ones specific to Django. There are other videos on related topics; they are useful but not relevant to the material we‚Äôre covering right now. | Curso de Django Desde Cero (Espa√±ol) Partes 1-3 | Django Chat Podcast: How to Learn Django | Pretty Printed Django: an Introduction for Beginners | . Getting Started with the Database in Django . | What is a relational database? | Database Design Tutorial This is a great short article that is really an intro to databases. It covers some data best practices and explains primary keys, foreign keys, and relationships. | Real Python: Django Migrations Primer | DB Browser for SQLite - a GUI for your sqlite database | . Debugging Django . | üìñ Python Debugging with Pdb | üì∫ Python Debugging with Pdb - Course on RealPython - only the first three videos are free but they are useful! | üì∫ Damilare Onajole, Debugging Python | . Models and Queries . | Django Docs: Models | ‚≠ê Django Docs: Model Field Reference | Django Docs Model Relationships | What are Primary Keys &amp; Foreign Keys? | Django Docs Making Queries (using the ORM) | Model field null=True -&gt; relevant for database storage | Model field blank=True -&gt; relevant for model object validation | üçï Tips for using Django‚Äôs Many-to-Many Field | What is an Entity Relationship Diagram? - The first video is especially good. | Less Obvious Things to Do with the Django ORM | Django Migrations: How To Add Non-Nullable Fields Without A Default Value | . Authentication, Registration, and the User Model in Django . | django-registration-redux . | We are using the simple (one-step) backend | . | Simple Is Better Than Complex: How to Extend the Django User Model . | Clear comparison of the four choices you have, and when you would use each one. | . | Django docs: User Authentication | Django docs: built-in User Model -&gt; documentation for all the things you get for free with the User from Django | Django docs: Extending the built-in User Model with AbstractUser . | Django Best Practices: Custom User Model -&gt; This tutorial is good to read for an overview, but you don‚Äôt need to follow the instructions to implement the forms to create or change a user, since we are using the django-registration-redux package for that. | . | Django docs: Authentication in Web Requests -&gt; django-registration-redux handles some of this for us (giving us the login and logout urls, for instance) but it‚Äôs helpful to see other ways you can use the authenticated user. | The login_required decorator | Limiting access to logged-in users that pass a test | Foreign Key to built-in User from DjangoGirls | Extending the User model (preferred, used in Uptact) | . URLs and Templates . | Django Docs URLs | Django Docs Template Language | . Django Packages . | Pipenv documentation | Django Debug Toolbar | How to use django-extensions shell_plus | django-environ | . Related Python &amp; Django References . | RealPython: What is a decorator? | Python dependency management overview -&gt; A good read to understand pip, pyenv, and pipenv better. | üí• Django Cheatsheet! | üí´ Django Chat Podcast: How Django Experts Think -&gt; Worth a listen, especially if you‚Äôre feeling discouraged about ever learning Django, and super relevant. | . Images . | Uploading Images | . Forms in Django . | Working with Forms -&gt; A good place to start for an overview | What is up with form.is_valid() | Validation on a model form | Form and field validation | The Forms API -&gt; Details on form object attribute and methods (such as as_p()) | Django‚Äôs CSRF protection . | What is CSRF? | . | . Custom Management Commands . | How to create custom django-admin commands (django docs) | How to Create Custom Django Management Commands - Simple Is Better Than Complex | . ",
    "url": "https://momentum-team-16.github.io/course/references/py-django/",
    "relUrl": "/references/py-django/"
  },"243": {
    "doc": "Python Code Break: Modules",
    "title": "Working with modules",
    "content": "Step 1 . Write a simple number guessing game. Your game should import the random module to generate a random integer between 1 and 20. When the program runs, it should prompt the user for a guess and then tell them if their guess was too high, too low, or correct. If you need an example of how to accept user input on the command line, you will find it in Jupyter notebook 03 - Input and Output. Step 2 . Modify your game so that it tells the user how many tries it took them to guess the right number. Step 3 . Limit the number of tries a user has to guess the number correctly. If the user doesn‚Äôt guess it in the number of tries you‚Äôve limited them to, they lose. ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-guess-number/#working-with-modules",
    "relUrl": "/code_exercises/py-guess-number/#working-with-modules"
  },"244": {
    "doc": "Python Code Break: Modules",
    "title": "Python Code Break: Modules",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-guess-number/",
    "relUrl": "/code_exercises/py-guess-number/"
  },"245": {
    "doc": "Python Code Break 1",
    "title": "Working with input and output",
    "content": "Create a file called gross_pay.py. Write your python code in that file. You should be able to run your program by typing python gross_pay.py at your command prompt. Exercise 1 . Write a program that will ask the user for a number of hours worked and a hourly rate. Calculate the gross pay based off those numbers. Then show the user the total. Enter hours worked: 20 Enter hourly rate: 18.50 Total: $370.0 . Exercise 2 . Add to the calculation time-and-a-half for hours worked over 40. (Note: time-and-a-half rate is the hourly rate * 1.5) . Enter hours worked: 55 Enter hourly rate: 20 Total: $1250 . Exercise 3 . Try to split your program into a function called calculate_pay(hours_worked, hourly_rate) and code that takes user input, calls calculate_pay and prints out the result. ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-input/#working-with-input-and-output",
    "relUrl": "/code_exercises/py-input/#working-with-input-and-output"
  },"246": {
    "doc": "Python Code Break 1",
    "title": "Python Code Break 1",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-input/",
    "relUrl": "/code_exercises/py-input/"
  },"247": {
    "doc": "Python Code Break: list comprehensions and formatting output",
    "title": "Working with list comprehensions and formatting output",
    "content": "exercise 1 . Write a list comprehension that takes each word in a list of words and puts it in all caps. phrases = [\"everything is fine\", \"have a seat\", \"holy cow\"] # your list comprehension should produce a list that looks like this: # ['EVERYTHING IS FINE', 'HAVE A SEAT', 'HOLY COW'] . Remember that the basic structure of a list comprehension is: . new_list = [&lt;expression&gt; for &lt;each_item&gt; in &lt;a_list&gt;] . exercise 2 . Rewrite a remove_from_list function to use a list comprehension to remove the item. The remove_from_list function should take a list of items and an item to remove from that list, and return a new list that contains everything from the original list except for that item. It should remove every occurrence of the item in the list (if it appears more than once). exercise 3 . Write a function print_freq_results(results). This function should take an argument results that is a list of tuples like the following: . [ ('her', 33), ('all', 12), ('which', 12), ('she', 7), ('their', 7), ] . This function should print (not return) output like the following: . her | 33 ********************************* all | 12 ************ which | 12 ************ she | 7 ******* their | 7 ******* . üòé HINT: You‚Äôre going to need some string methods to align the characters. ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-list-comprehensions/#working-with-list-comprehensions-and-formatting-output",
    "relUrl": "/code_exercises/py-list-comprehensions/#working-with-list-comprehensions-and-formatting-output"
  },"248": {
    "doc": "Python Code Break: list comprehensions and formatting output",
    "title": "Python Code Break: list comprehensions and formatting output",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-list-comprehensions/",
    "relUrl": "/code_exercises/py-list-comprehensions/"
  },"249": {
    "doc": "Python Lists & Dicts",
    "title": "Lists and List Comprehensions",
    "content": ". | RealPython: Python lists and tuples | Python Docs: List comprehensions | Python Docs: Comprensi√≥n de Listas | Python list comprehensions explained visually | List Comprehensions | . ",
    "url": "https://momentum-team-16.github.io/course/references/py-lists-and-dicts/#lists-and-list-comprehensions",
    "relUrl": "/references/py-lists-and-dicts/#lists-and-list-comprehensions"
  },"250": {
    "doc": "Python Lists & Dicts",
    "title": "Sorting and Lambdas",
    "content": ". | RealPython: Sorting in Python | Python Docs: Sorting HOWTO | Lambda Functions | . ",
    "url": "https://momentum-team-16.github.io/course/references/py-lists-and-dicts/#sorting-and-lambdas",
    "relUrl": "/references/py-lists-and-dicts/#sorting-and-lambdas"
  },"251": {
    "doc": "Python Lists & Dicts",
    "title": "Dictionaries",
    "content": ". | Python Docs: Dictionaries | Documentaci√≥n de Python: Diccionarios | RealPython: Dictionaries | . ",
    "url": "https://momentum-team-16.github.io/course/references/py-lists-and-dicts/#dictionaries",
    "relUrl": "/references/py-lists-and-dicts/#dictionaries"
  },"252": {
    "doc": "Python Lists & Dicts",
    "title": "Python Lists & Dicts",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/py-lists-and-dicts/",
    "relUrl": "/references/py-lists-and-dicts/"
  },"253": {
    "doc": "Python Code Break 3",
    "title": "Working with lists",
    "content": "exercise 1 . Write a function called remove_from_list that takes a list of items and an item to remove from that list: remove_from_list(list_of_items, item_to_remove) . The function should return a new list with the item removed. Write code to test your function, like the following: . remove_from_list(['Dallas', 'Kelly', 'Courtney', 'Hayden', 'Chase'], 'Hayden') # should return ['Dallas', 'Kelly', 'Courtney', 'Chase'] . Make sure your function removes all instances of the item. Write code to test this. remove_from_list(['MI', 'AK', 'SC', 'AK', 'DE'], 'AK') # should return `['MI', 'SC', 'DE'] . exercise 2 . Write a function remove_many_from_list(list_of_items, items_to_remove) that takes two lists, a list of items, and a list of items to remove from that original list. You can re-use remove_from_list or write it from scratch. ingredients = ['onions', 'habanero hot sauce', 'tomatoes', 'tortillas', 'corn', 'black beans', 'avocados', 'cheese',] foods_my_kids_hate = ['habanero hot sauce', 'avocados'] remove_many_from_list(ingredients, foods_my_kids_hate) # should return ['onions', 'tomatoes', 'tortillas', 'corn', 'black beans', 'cheese'] . ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-lists/#working-with-lists",
    "relUrl": "/code_exercises/py-lists/#working-with-lists"
  },"254": {
    "doc": "Python Code Break 3",
    "title": "Python Code Break 3",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-lists/",
    "relUrl": "/code_exercises/py-lists/"
  },"255": {
    "doc": "Python Code Break: OO",
    "title": "Define a User class and create user objects",
    "content": "Step 0 . Create a new Python file and name it whatever you want. This is where you will write the code that follows. Step 1 . Make a class named User. Add the following attributes to your class (in the __init__() method): . | name | email | city | state | . Create two different user instances using your class and save them to variables (something like user1 and user2). When you run your file, print out f-strings that display info using attributes from each user instance: . Anton lives in Durham, NC. Cecil lives in San Francisco, CA. Step 2 . Add a __str__ method to your class that displays the identity and attributes of an instance when it is printed. step 2 example . Say you have a Game class; the __str__ method could look like this (although there are lots of other options!): . def __str__(self): return f\"&lt;Game score={self.score} tries={self.tries}&gt;\" . If you print a game instance with that __str__() method (for example, print(game1)), the output should look like this: . &lt;Game score=0 tries=8&gt; . Step 3 . Make a method named location that returns a string listing the user‚Äôs city and state (e.g., ‚ÄúDurham, NC‚Äù). Step 4 . Add an attribute called is_active to your class. This attribute should have a default value of True. Then, make another method called deactivate that changes the value of the is_active attribute to False. Create an instance of a user and test that it works. Try resetting the attribute to True using the assignment operator and checking the value again. Step 5 . Add an attribute called login_count that keeps a count of how many days in a row a user logs in. Its default value should be 0. Add a method called increment_login_count that adds 1 to the login_count attribute each time it is called and returns the updated count. Then add a method called reset_login_count that resets the count to 0. Create an instance of a user and test that this works. ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-oo/#define-a-user-class-and-create-user-objects",
    "relUrl": "/code_exercises/py-oo/#define-a-user-class-and-create-user-objects"
  },"256": {
    "doc": "Python Code Break: OO",
    "title": "Python Code Break: OO",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-oo/",
    "relUrl": "/code_exercises/py-oo/"
  },"257": {
    "doc": "Object-Oriented Python",
    "title": "Object-Oriented Python",
    "content": "Object-Oriented . | Real Python - Object-Oriented Programming in Python 3 | A Byte of Python: OO | Inheritance and Composition in Python OO | OO-Programming ‚Äì This is a chapter from a book called Beyond the Basic Stuff With Python by Al Sweigart. He has written a ton of great books on Python and makes them available to read for free online at inventwithpython.com. You might check out Automate the Boring Stuff with Python. It‚Äôs a fantastic beginner book. | How Classes and Objects Work in Python | RealPython: super() | . Classes in Python . | Python Docs: Clases | StackOverflow: How do I design a class in Python? | Special Methods (aka magic methods) in the Python Docs | Nombres Especiales de M√©todo | A Guide to Python‚Äôs Magic Methods This is a great reference, but watch out! It was written for Python 2, so a few things may be different in Python 3. | . Useful References for Debugging . | Scope of Variables in Python | üêõ Debugging Python For Fun &amp; Profit (video) | Code Style Checks in Python e.g. flake8 | . ",
    "url": "https://momentum-team-16.github.io/course/references/py-oop/",
    "relUrl": "/references/py-oop/"
  },"258": {
    "doc": "Python Code Break: Sequences",
    "title": "Exercise: working with sequences",
    "content": "Write a function that accepts one argument, a string, and counts the number of vowels (‚Äòa‚Äô, ‚Äòe‚Äô, ‚Äòi‚Äô, ‚Äòo‚Äô, ‚Äòu‚Äô) in that string. When you call the function with an all-lowercase string as an argument, your function should print the number of vowels in that string. countVowels('bananarama') # prints: Vowel count: 5 . ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-sequences/#exercise-working-with-sequences",
    "relUrl": "/code_exercises/py-sequences/#exercise-working-with-sequences"
  },"259": {
    "doc": "Python Code Break: Sequences",
    "title": "Where to write and run the code",
    "content": "You can do this a number of ways. Use whatever works for you. Here are some options: . | Create a .py file and write your code in there. Run the file at the command line: python my-filename.py | Create a .py file and write your code in there. Run the file using the terminal in VS Code. | Write and run your code in the Python REPL (just type python at the command line and you will see the &gt;&gt;&gt; prompt, which will let you start typing Python). | There is also a Python REPL built into VS Code that you could use. | . Don‚Äôt forget that you have to define the function AND call the function with some argument to test it. ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-sequences/#where-to-write-and-run-the-code",
    "relUrl": "/code_exercises/py-sequences/#where-to-write-and-run-the-code"
  },"260": {
    "doc": "Python Code Break: Sequences",
    "title": "Python Code Break: Sequences",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/code_exercises/py-sequences/",
    "relUrl": "/code_exercises/py-sequences/"
  },"261": {
    "doc": "Queries and Using the Shell",
    "title": "üéØ Objectives",
    "content": ". | Interacting with models in the shell | Queries and more queries | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/queries-and-django-shell/#-objectives",
    "relUrl": "/phase3-be/queries-and-django-shell/#-objectives"
  },"262": {
    "doc": "Queries and Using the Shell",
    "title": "üèóÔ∏è Project: Still Working on Habit Tracker",
    "content": "You can do this! üí™ What do you need to figure out in order to finish it? . üìñ Read | üì∫ Watch | üéß Listen . | Database Design for Beginners This is a talk from RailsConf, which is focused on Ruby on Rails (Rails is a framework for building web applications in Ruby, very similiar to Django). The talk is an excellent introduction to how to think about your data model ‚Äì that is, the logic that drives the decisions you make about the models in your code and the structure of your database. Please watch it all the way through; even though it uses Ruby examples you should be able to get the gist. | . This rest of this section is material to prep for the topic we will begin next week: building APIs. | RESTful APIs Read up through the ‚ÄúStandard Methods‚Äù subsection of the section on ‚ÄúMethods‚Äù. You can read more if you want to but it gets pretty deep. | Safia Abdullah, You and Me Learn All About HTTP | Web APIs Explained By Selling Goods From Your Farm | . ü¶Ñ PRO TIPS . | django-debug-toolbar has a SQL panel that will show you the queries you are running in the view. | With shell_plus (from django-extensions), you can see output of all the SQL queries if you run it like this: python manage.py shell_plus --print-sql | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/queries-and-django-shell/#%EF%B8%8F-project-still-working-on-habit-tracker",
    "relUrl": "/phase3-be/queries-and-django-shell/#Ô∏è-project-still-working-on-habit-tracker"
  },"263": {
    "doc": "Queries and Using the Shell",
    "title": "üîñ References",
    "content": ". | Models &amp; Queries | Databases | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/queries-and-django-shell/#-references",
    "relUrl": "/phase3-be/queries-and-django-shell/#-references"
  },"264": {
    "doc": "Queries and Using the Shell",
    "title": "Queries and Using the Shell",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/queries-and-django-shell/",
    "relUrl": "/phase3-be/queries-and-django-shell/"
  },"265": {
    "doc": "Forms in React",
    "title": "üéØ Objectives",
    "content": ". | React Trivia review | How to work with forms in React | Plan for collaborative project | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-forms/#-objectives",
    "relUrl": "/phase3-fe/react-forms/#-objectives"
  },"266": {
    "doc": "Forms in React",
    "title": "üèóÔ∏è Collaborative Project",
    "content": "Today we begin the project we‚Äôll work on for the rest of the phase. Read today‚Äôs post for more details. Meet with your teammates and plan the team project. You should have detailed wireframes, an idea of user flow (how your user interacts with your UI), and a plan for components done by tomorrow. Start with: What does my user see when they first land on this page? What will they do? What happens next? Draw sketches of each ‚Äúscreen‚Äù the user sees, and diagram how the UI changes when something happens. üö´ No writing code yet! Today is for planning only. We‚Äôll cover working together on GitHub tomorrow. ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-forms/#%EF%B8%8F-collaborative-project",
    "relUrl": "/phase3-fe/react-forms/#Ô∏è-collaborative-project"
  },"267": {
    "doc": "Forms in React",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": ". | üìñ Introduction to Client-Side Storage This is not specific to React. It explains the storage available in the browser, which we can use no matter how we‚Äôre building our front-end. | üìñ React Mental Models: Working With Input | . React Mental Model . Review the core concepts of how React works by reading these visual guides. | üìñ What is React? | üìñ React Mental Model: Cutting Holes in HTML | üìñ Props &amp; State Re-explained | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-forms/#-read---watch---listen",
    "relUrl": "/phase3-fe/react-forms/#-read---watch---listen"
  },"268": {
    "doc": "Forms in React",
    "title": "üîñ References",
    "content": ". | Git Collaboration | Forms in React | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-forms/#-references",
    "relUrl": "/phase3-fe/react-forms/#-references"
  },"269": {
    "doc": "Forms in React",
    "title": "Forms in React",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-forms/",
    "relUrl": "/phase3-fe/react-forms/"
  },"270": {
    "doc": "URL Routing in React",
    "title": "üéØ Objectives",
    "content": ". | How are projects coming along? üëÄ | Review Login and add Logout | Client-side routing with React Router | Organizing your files | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-router/#-objectives",
    "relUrl": "/phase3-fe/react-router/#-objectives"
  },"271": {
    "doc": "URL Routing in React",
    "title": "üèóÔ∏è Project",
    "content": "You should have detailed wireframes and a user flow outline, and components for at least the initial ‚Äúpage‚Äù your user is going to see when they arrive at your site. By today, you should be able to make GET requests for questions and their answers (if you are working on Questionbox) or for cards and friends (if you are working on Social Cards). üöÄ Deploy to Netlify today if you haven‚Äôt already! . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-router/#%EF%B8%8F-project",
    "relUrl": "/phase3-fe/react-router/#Ô∏è-project"
  },"272": {
    "doc": "URL Routing in React",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": ". | üìñ React Router Overview: What It Does and Why We Need It | üì∫ Learn React Router v6 in 45 minutes This video gets real in depth fast. Watch through the first 10 minutes or so for the basics. | üìñ How to Set Up React Router and Route to Other Components | . üóÑÔ∏è Organizing your files . When you have one component per file (which is how it usually should be), the files can accumulate very quickly. This is very subjective, but there are strategies and organizational patterns that you can follow to structure your files in a React application. You should always follow the practices and conventions established by the team that you work with. For starters, here are two good takes on how to organize your files. | React Folder Structure in 5 Steps | Delightful React File/Directory Structure | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-router/#-read---watch---listen",
    "relUrl": "/phase3-fe/react-router/#-read---watch---listen"
  },"273": {
    "doc": "URL Routing in React",
    "title": "üîñ References",
    "content": ". | Organizing your files | Using React Router | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-router/#-references",
    "relUrl": "/phase3-fe/react-router/#-references"
  },"274": {
    "doc": "URL Routing in React",
    "title": "URL Routing in React",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/react-router/",
    "relUrl": "/phase3-fe/react-router/"
  },"275": {
    "doc": "React",
    "title": "Tutorials",
    "content": ". | Ali Spittel, Beginner‚Äôs Guide to React Tutorial. | Kent C. Dodds, The Beginner‚Äôs Guide to React | The official (beta) React tutorial - classic, official. | Dave Ceddia, React Tutorial | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#tutorials",
    "relUrl": "/references/react/#tutorials"
  },"276": {
    "doc": "React",
    "title": "Getting Started",
    "content": ". | ‚≠ê Official (Beta) React Docs | React Dev Tools Extension Chrome Essential. Please install it. | Create React App Docs | Older Official React docs Uses older class syntax intead of hooks. | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#getting-started",
    "relUrl": "/references/react/#getting-started"
  },"277": {
    "doc": "React",
    "title": "React Concepts",
    "content": ". | What is React? A Visual Introduction for Beginners | React Mental Model: Cutting Holes in HTML | Understanding what it means to be declarative instead of imperative - video | Thinking in React | Thinking in React 2020 | Thinking ‚Äúdeclaratively‚Äù in React | Why React Re-Renders | Jenn Creighton, React Is Fiction | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#react-concepts",
    "relUrl": "/references/react/#react-concepts"
  },"278": {
    "doc": "React",
    "title": "Props and State",
    "content": ". | Props vs. State - blog post ‚ö†Ô∏è This post references the older class syntax of React. The basic concepts are the same, though. | Using State vs Props in React - video | Props &amp; State Re-explained | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#props-and-state",
    "relUrl": "/references/react/#props-and-state"
  },"279": {
    "doc": "React",
    "title": "Components",
    "content": ". | Component Design in React | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#components",
    "relUrl": "/references/react/#components"
  },"280": {
    "doc": "React",
    "title": "Managing State",
    "content": ". | Using the State Hook | Lifting State Up ‚Äì This is the official doc page, so it includes examples with older React sytax using JavaScript classes for components. To see it with hooks, watch the video Lifting State Up with Hooks. | React Beta Docs: Managing State | Syntax.fm podcast: State in React | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#managing-state",
    "relUrl": "/references/react/#managing-state"
  },"281": {
    "doc": "React",
    "title": "Conditional Rendering",
    "content": ". | 4 Techniques for Conditional Rendering in React | Conditional Rendering in React | React Official Docs: React Conditional Rendering | 5 Ways to Implement Conditional Rendering in React | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#conditional-rendering",
    "relUrl": "/references/react/#conditional-rendering"
  },"282": {
    "doc": "React",
    "title": "Events",
    "content": ". | React Docs: Handling Events in React | Handling onClick Events in React | Handing Events in React with examples for functional components | Supported Events in React | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#events",
    "relUrl": "/references/react/#events"
  },"283": {
    "doc": "React",
    "title": "AJAX in React",
    "content": ". | Axios on GitHub . | Axios docs: Getting Started | POST request example | POST request config | Axios Request Config | Axios Response Schema | . | Notes: JS for React | React Official Docs: AJAX and APIs | CORS explained for front-end devs | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#ajax-in-react",
    "relUrl": "/references/react/#ajax-in-react"
  },"284": {
    "doc": "React",
    "title": "useEffect",
    "content": ". | Official React docs: Using the Effect Hook | Ryan Florence tweet summarizing useEffect | Dave Ceddia: How useEffect Works, with Examples | A Visual Guide to useEffect | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#useeffect",
    "relUrl": "/references/react/#useeffect"
  },"285": {
    "doc": "React",
    "title": "useRef",
    "content": ". | Refs and the DOM - class-based component examples | useRef hook | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#useref",
    "relUrl": "/references/react/#useref"
  },"286": {
    "doc": "React",
    "title": "Custom Hooks",
    "content": ". | Custom hook recipes | More custom hooks | Official React docs on custom hooks | . Custom hooks for local storage . | Persisting React State in localstorage This blog post explains why you‚Äôd use a custom hook for this purpose as well as how you‚Äôd write it from scratch. | useLocalStorageState This npm package gives you a custom hook to do what the above article walks you through doing. | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#custom-hooks",
    "relUrl": "/references/react/#custom-hooks"
  },"287": {
    "doc": "React",
    "title": "Forms",
    "content": "See also JS: Forms and HTML: Forms . | React beta docs API reference: working with &lt;input&gt; | React Mental Model: Working with Input | Dave Ceddia: React Forms | React Official Docs: Uncontrolled components | Controlled vs uncontrolled form inputs in React This is a good summary of the two options for forms in React, but be aware that the code examples use the older class syntax instead of function components with hooks. | Data Binding in React (Using different form fields and keeping values in sync with state) | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#forms",
    "relUrl": "/references/react/#forms"
  },"288": {
    "doc": "React",
    "title": "File Upload",
    "content": ". | MDN: File input type | MDN: Accessing selected files | using the FormData object You do not need to use this, but many online tutorials about file upload will show examples using this, and it is helpful to know about. | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#file-upload",
    "relUrl": "/references/react/#file-upload"
  },"289": {
    "doc": "React",
    "title": "Authentication",
    "content": ". | Token Authentication Endpoint guide for djoser library -&gt; This is the library being used by the backend | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#authentication",
    "relUrl": "/references/react/#authentication"
  },"290": {
    "doc": "React",
    "title": "Local Storage and State",
    "content": ". | use-local-storage-state -&gt; You would npm install use-local-storage-state to use it in your code . | Check out this custom hook code example, which shows how you could implement this yourself (you could even borrow this code and use it in your project instead of the above library if you wanted to!). | . | Using the Web Storage API Using local storage without syncing it with state may cause weird bugs, but you should know about the underlying local storage API that is implemented in browsers. | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#local-storage-and-state",
    "relUrl": "/references/react/#local-storage-and-state"
  },"291": {
    "doc": "React",
    "title": "Deployment",
    "content": ". | Instructions for deploying a React app to Netlify | Netlify Docs | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#deployment",
    "relUrl": "/references/react/#deployment"
  },"292": {
    "doc": "React",
    "title": "The Ship-It Mindset",
    "content": ". | About the Ship It Mindset | ship it squirrel | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#the-ship-it-mindset",
    "relUrl": "/references/react/#the-ship-it-mindset"
  },"293": {
    "doc": "React",
    "title": "Mocking Data in Development",
    "content": ". | How to Build a Front-End App Before you Have an API | Create a mock API with Mockoon | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#mocking-data-in-development",
    "relUrl": "/references/react/#mocking-data-in-development"
  },"294": {
    "doc": "React",
    "title": "File Structure",
    "content": "This is very subjective, but there are strategies and organizational patterns that you can follow. You should follow the practices and conventions established by the team that you work with. For starters, here are two good takes on how to organize your files. | React Folder Structure in 5 Steps | Delightful React File/Directory Structure | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#file-structure",
    "relUrl": "/references/react/#file-structure"
  },"295": {
    "doc": "React",
    "title": "React Router",
    "content": "Basics . | React Router Overview: What It Does and Why We Need It | React Router Official Tutorial | How to Set Up React Router and Route to Other Components | Learn React Router v6 in 45 minutes | . General . | React Router docs | React Router Main Concepts This is pretty in-depth, and you may not need it, but it‚Äôs helpful if you want more explanation. | A Complete Guide to React Router really comprehensive, really good | The Complete Guide to URL Parameters with React Router | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#react-router",
    "relUrl": "/references/react/#react-router"
  },"296": {
    "doc": "React",
    "title": "Search",
    "content": ". | Axios Docs: Including search params in the request config | Blog post on query params with Axios | . Filtering existing data in your component . You could also perform a search without making an AJAX request, by filtering data that you already have in React. Here are a couple of examples of how you could do that. | Create a search bar from scratch | How to Build a Search Bar in React | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/#search",
    "relUrl": "/references/react/#search"
  },"297": {
    "doc": "React",
    "title": "React",
    "content": "Contents . | Tutorials | Getting Started | React Concepts | Props and State | Components | Managing State | Conditional Rendering | Events | AJAX in React | useEffect | useRef | Custom Hooks . | Custom hooks for local storage | . | Forms | File Upload | Authentication | Local Storage and State | Deployment | The Ship-It Mindset | Mocking Data in Development | File Structure | React Router . | Basics | General | . | Search . | Filtering existing data in your component | . | . ",
    "url": "https://momentum-team-16.github.io/course/references/react/",
    "relUrl": "/references/react/"
  },"298": {
    "doc": "References",
    "title": "References",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/references/",
    "relUrl": "/references/"
  },"299": {
    "doc": "Schedule",
    "title": "Phase 3 Weekly Schedule",
    "content": ". | 9:00 AM | 9:30 AM | 10:00 AM | 10:30 AM | 11:00 AM | 11:30 AM | 12:00 PM | 12:30 PM | 1:00 PM | 1:30 PM | 2:00 PM | 2:30 PM | 3:00 PM | 3:30 PM | 4:00 PM | 4:30 PM | 5:00 PM | 5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"300": {
    "doc": "Schedule",
    "title": "Monday",
    "content": ". | Back End Session Project Work for Front End 9:30 AM‚Äì11:30 AM | Lunch/Project Work 11:30 AM‚Äì2:00 PM | Front End Session Project Work for Back End 2:00 PM‚Äì4:00 PM | Project Work 4:00 PM‚Äì5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"301": {
    "doc": "Schedule",
    "title": "Tuesday",
    "content": ". | Back End Session Project Work for Front End 9:30 AM‚Äì11:30 AM | Lunch/Project Work 11:30 AM‚Äì2:00 PM | Front End Session Project Work for Back End 2:00 PM‚Äì4:00 PM | Project Work 4:00 PM‚Äì5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"302": {
    "doc": "Schedule",
    "title": "Wednesday",
    "content": ". | Project Work Lunch and short breaks as needed 9:30 AM‚Äì5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"303": {
    "doc": "Schedule",
    "title": "Thursday",
    "content": ". | Back End Session Project Work for Front End 9:30 AM‚Äì11:30 AM | Lunch/Project Work 11:30 AM‚Äì2:00 PM | Front End Session Project Work for Back End 2:00 PM‚Äì4:00 PM | Project Work 4:00 PM‚Äì5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"304": {
    "doc": "Schedule",
    "title": "Friday",
    "content": ". | Huddle 9:30 AM‚Äì10:30 AM | Career Services 11:00 AM‚Äì12:00 PM | Project Work Lunch &amp; short breaks as needed 12:00 PM‚Äì5:30 PM | . | . ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"305": {
    "doc": "Schedule",
    "title": "Phases 1 &amp; 2 Weekly Schedule",
    "content": ". | 9:00 AM | 9:30 AM | 10:00 AM | 10:30 AM | 11:00 AM | 11:30 AM | 12:00 PM | 12:30 PM | 1:00 PM | 1:30 PM | 2:00 PM | 2:30 PM | 3:00 PM | 3:30 PM | 4:00 PM | 4:30 PM | 5:00 PM | 5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"306": {
    "doc": "Schedule",
    "title": "Monday",
    "content": ". | Morning Session 9:30 AM‚Äì11:30 AM | Lunch/Project Work 11:30 AM‚Äì2:00 PM | Afternoon Session 2:00 PM‚Äì3:30 PM | Project Work 3:30 PM‚Äì5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"307": {
    "doc": "Schedule",
    "title": "Tuesday",
    "content": ". | Morning Session 9:30 AM‚Äì11:30 AM | Lunch/Project Work 11:30 AM‚Äì2:00 PM | Afternoon Session 2:00 PM‚Äì3:30 PM | Project Work 3:30 PM‚Äì5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"308": {
    "doc": "Schedule",
    "title": "Wednesday",
    "content": ". | Morning Session 9:30 AM‚Äì11:30 AM | Lunch/Project Work 11:30 AM‚Äì2:00 PM | Afternoon Session 2:00 PM‚Äì3:30 PM | Project Work 3:30 PM‚Äì5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"309": {
    "doc": "Schedule",
    "title": "Thursday",
    "content": ". | Morning Session 9:30 AM‚Äì11:30 AM | Lunch/Project Work 11:30 AM‚Äì2:00 PM | Afternoon Session 2:00 PM‚Äì3:30 PM | Project Work 3:30 PM‚Äì5:30 PM | . | ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"310": {
    "doc": "Schedule",
    "title": "Friday",
    "content": ". | Huddle 9:30 AM‚Äì10:30 AM | Career Services 11:00 AM‚Äì12:00 PM | Project Work Lunch &amp; short breaks as needed 12:00 PM‚Äì5:30 PM | . | . ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"311": {
    "doc": "Schedule",
    "title": "Schedule",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/schedule",
    "relUrl": "/schedule"
  },"312": {
    "doc": "Search in React",
    "title": "Objectives",
    "content": ". | Checking in on project progress üëÄ | Adding search in your application üîç | . To implement search in your application, you will need to collect user input and then either make an API request or filter existing data on the page. You probably want to have a text input so that your user can type in a search term, although you could use other types of inputs as well. ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/search/#objectives",
    "relUrl": "/phase3-fe/search/#objectives"
  },"313": {
    "doc": "Search in React",
    "title": "üèóÔ∏è Project",
    "content": "What can you do to make your project not just minimally functional, but great? . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/search/#%EF%B8%8F-project",
    "relUrl": "/phase3-fe/search/#Ô∏è-project"
  },"314": {
    "doc": "Search in React",
    "title": "Example Search Request with Query Params",
    "content": "Remember the iTunes API? You made a request to the API to get search results, and you needed to include query params that specified the search fields and terms you wanted to use for the search. https://itunes.apple.com/search?term=jack+johnson . Here‚Äôs how you might make a request that uses query params using Axios. Note: this example depends on searchTerm and token being defined in your code. axios.get('https://drf-library-api.herokuapp.com/api/books', { params: {search: searchTerm}, headers: {Authorization: `Token ${token}` } } ) . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/search/#example-search-request-with-query-params",
    "relUrl": "/phase3-fe/search/#example-search-request-with-query-params"
  },"315": {
    "doc": "Search in React",
    "title": "üîñ References",
    "content": ". | Search &amp; Filtering | Forms | useRef | Custom Hooks | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/search/#-references",
    "relUrl": "/phase3-fe/search/#-references"
  },"316": {
    "doc": "Search in React",
    "title": "Search in React",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-fe/search/",
    "relUrl": "/phase3-fe/search/"
  },"317": {
    "doc": "Token Authentication",
    "title": "üéØ Objectives",
    "content": ". | API project review | Token authentication in DRF with Djoser | Plan for collaborative project | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/token-auth/#-objectives",
    "relUrl": "/phase3-be/token-auth/#-objectives"
  },"318": {
    "doc": "Token Authentication",
    "title": "üèóÔ∏è Collaborative Project",
    "content": "Today we begin the project we‚Äôll work on for the rest of the phase. Read today‚Äôs post for more details. Meet with your team and work on your plan. Today, plan out your models. You should draw an ER diagram for your models. Think about what fields you need for your models (the Django Model Field Reference may be helpful). What are the relationships your models will need to have with each other? . Then, plan and write down a list of the endpoints you think you will need. What data will those endpoints have to return? Will your endpoints need to accept any data (remember you can do this in the body of the request or using part of the URL)? What permissions will you need to implement for your endpoints? . Your list of planned endpoints should look something like (this is a partial list using examples from Habit Tracker. You‚Äôre going to need a bunch more endpoints than this). Keep in mind that you should include endpoints ONLY if you need them, so consider the actions that you need to support according to the project requirements. Example planning for endpoints (you‚Äôll need more than these, of course): . | Request URL | Description | . | GET api/habits | returns a list of all habits for the authenticated user | . | GET api/habits/&lt;int:pk&gt; | returns details about one habit and its associated records | . | POST api/habits | create a new habit | . It should take you some time to talk all this through. üö´ No writing code yet! Today should be used for planning only. We‚Äôll cover working together on GitHub tomorrow. ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/token-auth/#%EF%B8%8F-collaborative-project",
    "relUrl": "/phase3-be/token-auth/#Ô∏è-collaborative-project"
  },"319": {
    "doc": "Token Authentication",
    "title": "üìñ Read | üì∫ Watch | üéß Listen",
    "content": ". | üì∫ Finally Understand Auth in DRF - a Will Vincent talk -&gt; Will isn‚Äôt using the Djoser library but he does a great job of reviewing different auth strategies and why you would choose one or the other. Watch this for a better understanding and overview of authentication. | üìñ Julia Evans comic explaining CORS better than MDN does | üìñ More Julia Evans on the Same Origin Policy | üìñ A Visual Guide to CORS by Lydia Hallie | üìñ Simple Is Better Than Complex: How to Implement Token Authentication in DRF This does NOT use Djoser, but it‚Äôs a great walkthrough of what Djoser does for you if you would like more detail. | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/token-auth/#-read---watch---listen",
    "relUrl": "/phase3-be/token-auth/#-read---watch---listen"
  },"320": {
    "doc": "Token Authentication",
    "title": "üîñ References",
    "content": ". | CORS | DRF Authentication | DRF Permissions | Git Collaboration | . ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/token-auth/#-references",
    "relUrl": "/phase3-be/token-auth/#-references"
  },"321": {
    "doc": "Token Authentication",
    "title": "Token Authentication",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase3-be/token-auth/",
    "relUrl": "/phase3-be/token-auth/"
  },"322": {
    "doc": "Tools",
    "title": "General Front End Code Formatting",
    "content": ". | Prettier Code Formatter This is information about the extenstion that you can (and should) install in VS Code. | How to format code with Prettier | . ",
    "url": "https://momentum-team-16.github.io/course/references/tools/#general-front-end-code-formatting",
    "relUrl": "/references/tools/#general-front-end-code-formatting"
  },"323": {
    "doc": "Tools",
    "title": "Back End Tools",
    "content": ". | üêõ Debugging Python For Fun &amp; Profit (video) | Code Style Checks in Python This post gives you some detail about what flake8 for and why you need it. | DB Browser for SQLite - a GUI for your sqlite database | . ",
    "url": "https://momentum-team-16.github.io/course/references/tools/#back-end-tools",
    "relUrl": "/references/tools/#back-end-tools"
  },"324": {
    "doc": "Tools",
    "title": "Collaboration",
    "content": ". | GitHub Collaboration Docs | Git Collaboration slides | Git in VS Code Not everyone loves using git on the command line like I do. A lot of folks like using the integration in VS Code, so you might want to give it a try. This is a good place to start, but there are many other extensions that you could use as well. | . ",
    "url": "https://momentum-team-16.github.io/course/references/tools/#collaboration",
    "relUrl": "/references/tools/#collaboration"
  },"325": {
    "doc": "Tools",
    "title": "Time Management",
    "content": ". | The Pomodoro Technique for Time Management &amp; Productivity | Zapier‚Äôs list of Pomodoro Apps | Time Blocking | Common Time Management Problems &amp; Solutions | . ",
    "url": "https://momentum-team-16.github.io/course/references/tools/#time-management",
    "relUrl": "/references/tools/#time-management"
  },"326": {
    "doc": "Tools",
    "title": "Markdown",
    "content": "Markdown is an easy-to-learn way to add formatting to plain text and code snippets. It is commonly used in READMEs on GitHub and can even be used to generate HTML. It comes in handy a lot for developers, and you should know how to use it. The .md extension indicates a Markdown file. The pages for this site and every note in your team‚Äôs notes repo are formatted in Markdown ‚Äì have a look on GitHub for examples! . | Learn X in Y Minutes: Markdown | Mastering Markdown 30-min video course that will help you get proficient with Markdown quickly. | Markdown Guide: Getting Started | Markdown Tutorial | . ",
    "url": "https://momentum-team-16.github.io/course/references/tools/#markdown",
    "relUrl": "/references/tools/#markdown"
  },"327": {
    "doc": "Tools",
    "title": "Taking Notes as a Developer",
    "content": ". | How to take useful notes as a developer | How Note Taking Makes Me a Better Developer | . Tools for Taking Notes . It‚Äôs important that the application you use to take notes can properly format code blocks. Here are some options. | VS Code (with this option you could create a simple git repo with markdown files) | BoostNote | Notion | Typora | . Pair Programming . | Tuple Pair Programming Template | . ",
    "url": "https://momentum-team-16.github.io/course/references/tools/#taking-notes-as-a-developer",
    "relUrl": "/references/tools/#taking-notes-as-a-developer"
  },"328": {
    "doc": "Tools",
    "title": "Tools",
    "content": "Contents . | General Front End Code Formatting | Back End Tools | Collaboration | Time Management | Markdown | Taking Notes as a Developer . | Tools for Taking Notes | Pair Programming | . | . ",
    "url": "https://momentum-team-16.github.io/course/references/tools/",
    "relUrl": "/references/tools/"
  },"329": {
    "doc": "Topics by Date",
    "title": "Software Engineering Immersive",
    "content": "Topics are listed by date, newest to oldest. New entries are added daily. ",
    "url": "https://momentum-team-16.github.io/course/index.html#software-engineering-immersive",
    "relUrl": "/index.html#software-engineering-immersive"
  },"330": {
    "doc": "Topics by Date",
    "title": "Phase 4",
    "content": "February 17 Ready‚Ä¶Set‚Ä¶Code! February 16 Trello and Tasks Post February 15 Writing User Stories February 14 Defining MVP Post February 13 Agile Development 101 Post ",
    "url": "https://momentum-team-16.github.io/course/index.html#phase-4",
    "relUrl": "/index.html#phase-4"
  },"331": {
    "doc": "Topics by Date",
    "title": "Phase 3",
    "content": "February 7 be File &amp; Image Upload Post Project Code Demo February 7 fe Uploading Files Post Project Code Demo February 6 be Search with DRF and Postgres Post Project Code Demo February 6 fe Search in React Post Project Code Demo February 2 be API Endpoints Project Code Demo February 2 fe URL Routing in React Project Code Demo January 31 fe Authentication in React Project Code Demo January 31 be Models and API Design Project Code Demo January 30 be Token Authentication and CORS Post Project Code Demo January 30 fe Forms in React Post Project Code Demo January 26 fe Deploying a React App Project Code Demo January 26 be DRF Views and Serializers Project Code Demo January 24 fe Multiple Components and Conditional Rendering Project Code Demo January 24 be Intro to Django REST Framework Project Code Demo January 23 be HTTP and REST Project Code Demo January 23 fe AJAX and APIs Project Code Demo January 19 fe Components, Props, and State Project Code Demo January 19 be Queries &amp; Using the Shell Project Code Demo January 18 be Models and Queries Project Code Demo January 18 fe Hello React World Project Code Demo January 17 fe The Modern JS Landscape Post Project January 17 be Databases and Deployment Post Project Code Demo ",
    "url": "https://momentum-team-16.github.io/course/index.html#phase-3",
    "relUrl": "/index.html#phase-3"
  },"332": {
    "doc": "Topics by Date",
    "title": "Topics by Date",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/index.html",
    "relUrl": "/index.html"
  },"333": {
    "doc": "Trello & Tasks",
    "title": "üéØ Learning Objectives &amp; Agenda",
    "content": ". | Turning user stories into tasks | Putting tasks on your Trello board | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/trello-and-tasks/#-learning-objectives--agenda",
    "relUrl": "/phase4/trello-and-tasks/#-learning-objectives--agenda"
  },"334": {
    "doc": "Trello & Tasks",
    "title": "Example Trello Boards",
    "content": "These boards are from real final projects, so you‚Äôll see most of the cards in the ‚ÄúDone‚Äù column. | Open Mic Trello Board | Music Teacher App Trello Board | Game Knight Trello Board | Purple Rain Trello Board | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/trello-and-tasks/#example-trello-boards",
    "relUrl": "/phase4/trello-and-tasks/#example-trello-boards"
  },"335": {
    "doc": "Trello & Tasks",
    "title": "üîñ References",
    "content": ". | User Stories | User Flows | Going from User Stories to Tasks | Trello &amp; Tasks Slides | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/trello-and-tasks/#-references",
    "relUrl": "/phase4/trello-and-tasks/#-references"
  },"336": {
    "doc": "Trello & Tasks",
    "title": "Trello & Tasks",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase4/trello-and-tasks/",
    "relUrl": "/phase4/trello-and-tasks/"
  },"337": {
    "doc": "Writing User Stories",
    "title": "üéØ Learning Objectives &amp; Agenda",
    "content": ". | Figuring out who your users are (and aren‚Äôt) | Using Personas to communicate about your app‚Äôs users | Map out user flows | Create wireframes | Writing user stories | . Personas &amp; User Stories . You don‚Äôt necessarily need to create user personas for your app, but you do need to determine and explicitly define who your users are. Personas may help you do that! . You do need to write user stories. You‚Äôll be ready to do this once you can answer the question ‚ÄúWhat is your app and what does it do?‚Äù . ",
    "url": "https://momentum-team-16.github.io/course/phase4/user-stories/#-learning-objectives--agenda",
    "relUrl": "/phase4/user-stories/#-learning-objectives--agenda"
  },"338": {
    "doc": "Writing User Stories",
    "title": "üîñ References",
    "content": ". | User stories | Personas | User Flows | Personas &amp; User Stories Slides | . ",
    "url": "https://momentum-team-16.github.io/course/phase4/user-stories/#-references",
    "relUrl": "/phase4/user-stories/#-references"
  },"339": {
    "doc": "Writing User Stories",
    "title": "Writing User Stories",
    "content": " ",
    "url": "https://momentum-team-16.github.io/course/phase4/user-stories/",
    "relUrl": "/phase4/user-stories/"
  }
}
